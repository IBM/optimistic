DomainInfo for *
  * Type:   Any
  * Domain: <DUMMY#20: function-domain *>
===========
DomainInfo for /
  * Type:   Any
  * Domain: <DUMMY#24: function-domain />
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.resource_allocation_bom_2.Assignment
  * Type:   Any
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_client.optimization.OptimizationProblem
  * Type:   Any
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.resource_allocation_bom_2.Resource
  * Type:   Any
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_client.unique_assignment.UniqueAssignment
  * Type:   Any
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_office_availability.Comprehension_Generator.a
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeAvailability
  * Domain: building($self)
  DomainInfo for rooms
    * Type:   Integer
    * Domain: DUMMY#47, value=InputValue('RoomAllocationProblem8', 'building', 'rooms')
  DomainInfo for floor
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
    * Domain: DUMMY#40, value=InputValue('RoomAllocationProblem8', 'building', 'floor')
  DomainInfo for office_type
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
    * Domain: DUMMY#48, value=InputValue('RoomAllocationProblem8', 'building', 'office_type')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function all_floors.Comprehension_Set.a
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeAvailability
  * Domain: building($self)
  DomainInfo for floor
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
    * Domain: DUMMY#40, value=InputValue('RoomAllocationProblem8', 'building', 'floor')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_objective.Comprehension_Generator.a1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Area
  * Domain: $self.all_areas()
===========
DomainInfo for all
  * Type:   (Stream[Any])->Boolean
  * Domain: None
===========
DomainInfo for all_areas:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Set[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Area]
  * Domain: <DUMMY#33: function-domain all_areas>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.all_areas
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Set[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Area]
  * Domain: <DUMMY#3: function-result all_areas>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.all_employees
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Set[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeId]
  * Domain: <DUMMY#4: function-result all_employees>
===========
DomainInfo for all_floors:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Set[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor]
  * Domain: <DUMMY#22: function-domain all_floors>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.all_floors
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Set[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor]
  * Domain: <DUMMY#2: function-result all_floors>
===========
DomainInfo for all_office_types:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Set[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType]
  * Domain: <DUMMY#21: function-domain all_office_types>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.all_office_types
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Set[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType]
  * Domain: <DUMMY#5: function-result all_office_types>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_penalty.area
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Area
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_utilization.area
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Area
  * Domain: DUMMY#54, value=InputValue('RoomAllocationProblem8', 'employees', 'area')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.area_objective
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Number
  * Domain: <DUMMY#35: function-result area_objective>
  * Decision variable
===========
DomainInfo for area_penalty:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Area, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor)->Number
  * Domain: <DUMMY#32: function-domain area_penalty>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.area_penalty
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Area, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor)->Number
  * Domain: <DUMMY#31: function-result area_penalty>
  * Decision variable
===========
DomainInfo for area_utilization:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, Any, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor)->Integer
  * Domain: <DUMMY#30: function-domain area_utilization>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.area_utilization
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, Any, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor)->Integer
  * Domain: <DUMMY#29: function-result area_utilization>
  * Decision variable
===========
DomainInfo for assigned_offices:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor)->Integer
  * Domain: <DUMMY#27: function-domain assigned_offices>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.assigned_offices
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor)->Integer
  * Domain: <DUMMY#26: function-result assigned_offices>
  * Decision variable
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.availability_constraint
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Boolean
  * Domain: <DUMMY#23: function-result availability_constraint>
  * Decision variable
===========
DomainInfo for ceil
  * Type:   Any
  * Domain: <DUMMY#25: function-domain ceil>
===========
DomainInfo for *python-builtins*.math.ceil
  * Type:   (Number)->Integer
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_client.meta.utils.constraint
  * Type:   Any
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.cost_objective
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Number
  * Domain: <DUMMY#28: function-result cost_objective>
  * Decision variable
===========
DomainInfo for *python-builtins*.optimistic_client.meta.utils.count
  * Type:   (Stream[Any])->Integer
  * Domain: <DUMMY#15: function-domain count>
===========
DomainInfo for *python-builtins*.dataclasses.dataclass
  * Type:   Any
  * Domain: <DUMMY#1: function-domain dataclass>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function all_areas.Comprehension_Set.e
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee
  * Domain: employees($self)
  DomainInfo for area
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Area
    * Domain: DUMMY#41, value=InputValue('RoomAllocationProblem8', 'employees', 'area')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function all_employees.Comprehension_Set.e
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee
  * Domain: employees($self)
  DomainInfo for number
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeId
    * Domain: DUMMY#42, value=InputValue('RoomAllocationProblem8', 'employees', 'number')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_utilization.Comprehension_Generator.e1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee
  * Domain: employees($self)
  DomainInfo for is_team_lead
    * Type:   Boolean
    * Domain: DUMMY#53, value=InputValue('RoomAllocationProblem8', 'employees', 'is_team_lead')
  DomainInfo for area
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Area
    * Domain: DUMMY#54, value=InputValue('RoomAllocationProblem8', 'employees', 'area')
  DomainInfo for number
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeId
    * Domain: DUMMY#49, value=InputValue('RoomAllocationProblem8', 'employees', 'number')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function occupancy.Comprehension_Generator.e1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee
  * Domain: employees($self)
  DomainInfo for type
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeType
    * Domain: DUMMY#52, value=InputValue('RoomAllocationProblem8', 'employees', 'type')
  DomainInfo for number
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeId
    * Domain: DUMMY#49, value=InputValue('RoomAllocationProblem8', 'employees', 'number')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function same_floor.Comprehension_Generator.e1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee
  * Domain: employees($self)
  DomainInfo for number
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeId
    * Domain: DUMMY#49, value=InputValue('RoomAllocationProblem8', 'employees', 'number')
  DomainInfo for team_lead
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeId
    * Domain: DUMMY#50, value=InputValue('RoomAllocationProblem8', 'employees', 'team_lead')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function office_type_by_employee_type.Comprehension_Generator.entry
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeTypeByEmployeeType
  * Domain: office_type_by_employee_type_table($self)
  DomainInfo for office_type
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
    * Domain: DUMMY#45, value=InputValue('RoomAllocationProblem8', 'office_type_by_employee_type_table', 'office_type')
  DomainInfo for employee_type
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeType
    * Domain: DUMMY#46, value=InputValue('RoomAllocationProblem8', 'office_type_by_employee_type_table', 'employee_type')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_objective.Comprehension_Generator.f1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
  * Domain: $self.all_floors()
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function availability_constraint.Comprehension_Generator.f1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
  * Domain: $self.all_floors()
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function cost_objective.Comprehension_Generator.f1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
  * Domain: $self.all_floors()
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_penalty.f1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_utilization.f1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function assigned_offices.f1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_office_availability.f1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
  * Domain: DUMMY#40, value=InputValue('RoomAllocationProblem8', 'building', 'floor')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function occupancy.f1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor
  * Domain: None
===========
DomainInfo for floor_assignments
  * Type:   Any
  * Domain: None
  * Decision variable
===========
DomainInfo for get_employee:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, Any)->@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee
  * Domain: <DUMMY#11: function-domain get_employee>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.get_employee
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, Any)->@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee
  * Domain: <DUMMY#11: function-domain get_employee>
===========
DomainInfo for get_office_availability:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, Any, Any)->Integer
  * Domain: <DUMMY#19: function-domain get_office_availability>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.get_office_availability
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, Any, Any)->Integer
  * Domain: <DUMMY#9: function-result get_office_availability>
===========
DomainInfo for get_office_info:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType)->@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeTypeInfo
  * Domain: <DUMMY#18: function-domain get_office_info>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.get_office_info
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType)->@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeTypeInfo
  * Domain: <DUMMY#7: function-result get_office_info>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_employee.Comprehension_Generator.m
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee
  * Domain: employees($self)
  DomainInfo for number
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeId
    * Domain: DUMMY#51, value=InputValue('RoomAllocationProblem8', 'employees', 'number')
===========
DomainInfo for *python-builtins*.optimistic_client.meta.utils.minimize
  * Type:   Any
  * Domain: <DUMMY#34: function-domain minimize>
===========
DomainInfo for next
  * Type:   Any
  * Domain: <DUMMY#6: function-domain next>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_employee.number
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeId
  * Domain: DUMMY#51, value=InputValue('RoomAllocationProblem8', 'employees', 'number')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function availability_constraint.Comprehension_Generator.o1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
  * Domain: $self.all_office_types()
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function cost_objective.Comprehension_Generator.o1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
  * Domain: $self.all_office_types()
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function assigned_offices.o1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_office_availability.o1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
  * Domain: DUMMY#48, value=InputValue('RoomAllocationProblem8', 'building', 'office_type')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function occupancy.o1
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
  * Domain: None
===========
DomainInfo for occupancy:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor, Any)->Integer
  * Domain: <DUMMY#17: function-domain occupancy>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.occupancy
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Floor, Any)->Integer
  * Domain: <DUMMY#16: function-result occupancy>
  * Decision variable
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function all_office_types.Comprehension_Set.ofc
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeTypeByEmployeeType
  * Domain: office_type_by_employee_type_table($self)
  DomainInfo for office_type
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
    * Domain: DUMMY#43, value=InputValue('RoomAllocationProblem8', 'office_type_by_employee_type_table', 'office_type')
===========
DomainInfo for office_type_by_employee_type:?->Any
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, Any)->@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
  * Domain: <DUMMY#14: function-domain office_type_by_employee_type>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.office_type_by_employee_type
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8, Any)->@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
  * Domain: <DUMMY#8: function-result office_type_by_employee_type>
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_office_info.ot
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
  * Domain: None
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_office_info.Comprehension_Generator.oti
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeTypeInfo
  * Domain: office_info($self)
  DomainInfo for type_name
    * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeType
    * Domain: DUMMY#44, value=InputValue('RoomAllocationProblem8', 'office_info', 'type_name')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.same_floor
  * Type:   (@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8)->Boolean
  * Domain: <DUMMY#12: function-result same_floor>
  * Decision variable
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function all_areas.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for employees
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee]
    * Domain: <DUMMY#37: link-domain employees $self>
    * Value:  InputValue('RoomAllocationProblem8', 'employees')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function all_employees.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for employees
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee]
    * Domain: <DUMMY#37: link-domain employees $self>
    * Value:  InputValue('RoomAllocationProblem8', 'employees')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function all_floors.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for building
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeAvailability]
    * Domain: <DUMMY#36: link-domain building $self>
    * Value:  InputValue('RoomAllocationProblem8', 'building')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function all_office_types.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for office_type_by_employee_type_table
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeTypeByEmployeeType]
    * Domain: <DUMMY#38: link-domain office_type_by_employee_type_table $self>
    * Value:  InputValue('RoomAllocationProblem8', 'office_type_by_employee_type_table')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_objective.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_penalty.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function area_utilization.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for employees
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee]
    * Domain: <DUMMY#37: link-domain employees $self>
    * Value:  InputValue('RoomAllocationProblem8', 'employees')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function assigned_offices.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function availability_constraint.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function cost_objective.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_employee.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for employees
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee]
    * Domain: <DUMMY#37: link-domain employees $self>
    * Value:  InputValue('RoomAllocationProblem8', 'employees')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_office_availability.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for building
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeAvailability]
    * Domain: <DUMMY#36: link-domain building $self>
    * Value:  InputValue('RoomAllocationProblem8', 'building')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function get_office_info.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for office_info
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeTypeInfo]
    * Domain: <DUMMY#39: link-domain office_info $self>
    * Value:  InputValue('RoomAllocationProblem8', 'office_info')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function occupancy.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for employees
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee]
    * Domain: <DUMMY#37: link-domain employees $self>
    * Value:  InputValue('RoomAllocationProblem8', 'employees')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function office_type_by_employee_type.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for office_type_by_employee_type_table
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.OfficeTypeByEmployeeType]
    * Domain: <DUMMY#38: link-domain office_type_by_employee_type_table $self>
    * Value:  InputValue('RoomAllocationProblem8', 'office_type_by_employee_type_table')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function same_floor.self
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.RoomAllocationProblem8
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8',)
  DomainInfo for employees
    * Type:   Collection[@*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Employee]
    * Domain: <DUMMY#37: link-domain employees $self>
    * Value:  InputValue('RoomAllocationProblem8', 'employees')
===========
DomainInfo for *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.Class RoomAllocationProblem8.Function office_type_by_employee_type.t_emp
  * Type:   @*python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_8.EmployeeType
  * Domain: DUMMY#46, value=InputValue('RoomAllocationProblem8', 'office_type_by_employee_type_table', 'employee_type')
===========
DomainInfo for unique_assignment:?->Any
  * Type:   ?->Any
  * Domain: <DUMMY#10: function-domain unique_assignment>
===========
DomainInfo for *python-builtins*.optimistic_client.unique_assignment.Class UniqueAssignment.unique_assignment
  * Type:   ?->Any
  * Domain: <DUMMY#10: function-domain unique_assignment>
  * Decision variable
DomainInfo for <DUMMY#1: function-domain dataclass>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#2: function-result all_floors>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#3: function-result all_areas>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#4: function-result all_employees>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#5: function-result all_office_types>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#6: function-domain next>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#7: function-result get_office_info>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#8: function-result office_type_by_employee_type>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#9: function-result get_office_availability>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#10: function-domain unique_assignment>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#11: function-domain get_employee>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#12: function-result same_floor>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#13: function-result get_employee>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#14: function-domain office_type_by_employee_type>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#15: function-domain count>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#16: function-result occupancy>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#17: function-domain occupancy>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#18: function-domain get_office_info>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#19: function-domain get_office_availability>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#20: function-domain *>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#21: function-domain all_office_types>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#22: function-domain all_floors>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#23: function-result availability_constraint>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#24: function-domain />
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#25: function-domain ceil>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#26: function-result assigned_offices>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#27: function-domain assigned_offices>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#28: function-result cost_objective>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#29: function-result area_utilization>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#30: function-domain area_utilization>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#31: function-result area_penalty>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#32: function-domain area_penalty>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#33: function-domain all_areas>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#34: function-domain minimize>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#35: function-result area_objective>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#36: link-domain building $self>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#37: link-domain employees $self>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#38: link-domain office_type_by_employee_type_table $self>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#39: link-domain office_info $self>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#40: link-domain floor $a>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'building', 'floor')
===========
DomainInfo for <DUMMY#41: link-domain area $e>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'employees', 'area')
===========
DomainInfo for <DUMMY#42: link-domain number $e>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'employees', 'number')
===========
DomainInfo for <DUMMY#43: link-domain office_type $ofc>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'office_type_by_employee_type_table', 'office_type')
===========
DomainInfo for <DUMMY#44: link-domain type_name $oti>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'office_info', 'type_name')
===========
DomainInfo for <DUMMY#45: link-domain office_type $entry>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'office_type_by_employee_type_table', 'office_type')
===========
DomainInfo for <DUMMY#46: link-domain employee_type $entry>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'office_type_by_employee_type_table', 'employee_type')
===========
DomainInfo for <DUMMY#47: link-domain rooms $a>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'building', 'rooms')
===========
DomainInfo for <DUMMY#48: link-domain office_type $a>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'building', 'office_type')
===========
DomainInfo for <DUMMY#49: link-domain number $e1>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'employees', 'number')
===========
DomainInfo for <DUMMY#50: link-domain team_lead $e1>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'employees', 'team_lead')
===========
DomainInfo for <DUMMY#51: link-domain number $m>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'employees', 'number')
===========
DomainInfo for <DUMMY#52: link-domain type $e1>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'employees', 'type')
===========
DomainInfo for <DUMMY#53: link-domain is_team_lead $e1>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'employees', 'is_team_lead')
===========
DomainInfo for <DUMMY#54: link-domain area $e1>
  * Type:   ⊥
  * Domain: None
  * Value:  InputValue('RoomAllocationProblem8', 'employees', 'area')
===========
DomainInfo for <DUMMY#55: link-domain max_occupancy $self.get_office_info($o1)>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#56: link-domain cost $self.get_office_info($o1)>
  * Type:   ⊥
  * Domain: None
===========
DomainInfo for <DUMMY#57: link-domain is_independent $self.get_employee(team_lead($e1))>
  * Type:   ⊥
  * Domain: None
