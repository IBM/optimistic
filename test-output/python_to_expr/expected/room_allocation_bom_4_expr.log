Expression: Math-Module(DATA-CLASS @*python-builtins*.dataclasses.dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) Area1:  name: String; ALIAS Area AS String; DATA-CLASS @*python-builtins*.dataclasses.dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) Floor1:  desginator: String; ALIAS Floor AS String; DATA-CLASS @*python-builtins*.dataclasses.dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) OfficeAvailability:  floor: @Floor (Primary key); office_type: @OfficeType (Primary key); rooms: Integer; DATA-CLASS @*python-builtins*.dataclasses.dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) Employee(*python-builtins*.optimistic_examples.room_allocation.resource_allocation_bom.Resource:= $Resource):  type: @EmployeeType; number: Integer (Primary key); team_lead: Integer; is_team_lead: Boolean; is_independent: Boolean; area: @Area; DATA-CLASS @*python-builtins*.dataclasses.dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) FloorAssignment(*python-builtins*.optimistic_examples.room_allocation.resource_allocation_bom.Assignment:= $Assignment):  resource: @Employee; activity: @Floor; DATA-CLASS @*python-builtins*.dataclasses.dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) OfficeTypeByEmployeeType:  employee_type: @EmployeeType (Primary key); office_type: @OfficeType; DATA-CLASS @*python-builtins*.dataclasses.dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) RoomAllocationProblem4(*python-builtins*.optimistic_client.optimization.OptimizationProblem:= $OptimizationProblem, *python-builtins*.optimistic_client.unique_assignment.UniqueAssignment:= $UniqueAssignment): DOC="
    Optimization problem of allocating employees to offices
    " solution: Set[@FloorAssignment]; employees: Collection[@Employee]; building: Collection[@OfficeAvailability]; office_type_by_employee_type_table: Collection[@OfficeTypeByEmployeeType]; DEFINE @*python-builtins*.optimistic_client.meta.utils.memoize:= $memoize self.all_floors(): Any = SET floor(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function all_floors.GETATTR(REF(a), floor).a:= $a) FOR a IN building(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function all_floors.self:= $self); DEFINE @*python-builtins*.optimistic_client.meta.utils.memoize:= $memoize self.all_areas(): Any = SET area(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function all_areas.GETATTR(REF(e), area).e:= $e) FOR e IN employees(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function all_areas.self:= $self); DEFINE @*python-builtins*.optimistic_client.meta.utils.constraint:= $constraint self.legal_assignment(): Any = ∀a ∈ solution(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function legal_assignment.self:= $self). (resource(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function legal_assignment.OP(and; COMP(in; GETATTR(REF(a), resource), GETATTR(REF(self), employees)), COMP(in; GETATTR(REF(a), activity), CALL(GETATTR(REF(self), all_floors); ))).a:= $a) ∈ employees(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function legal_assignment.self:= $self) ∧ activity(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function legal_assignment.OP(and; COMP(in; GETATTR(REF(a), resource), GETATTR(REF(self), employees)), COMP(in; GETATTR(REF(a), activity), CALL(GETATTR(REF(self), all_floors); ))).a:= $a) ∈ *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function legal_assignment.self:= $self.all_floors:?->Any()); DEFINE @*python-builtins*.optimistic_client.meta.utils.constraint:= $constraint self.constraint2(): Boolean = BODY DOC="
        Each employee must be assigned to the same floor as his/her team lead unless the team lead is independent
        " VALUE="∀e1 ∈ employees(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint2.self:= $self) S.T. ¬is_independent(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint2.self:= $self.get_employee:?->Any(team_lead(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint2.COMP(==; CALL(GETATTR(REF(self), unique_assignment); REF(e1)), CALL(GETATTR(REF(self), unique_assignment); CALL(GETATTR(REF(self), get_employee); GETATTR(REF(e1), team_lead)))).e1:= $e1))). *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint2.self:= $self.unique_assignment:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint2.COMP(==; CALL(GETATTR(REF(self), unique_assignment); REF(e1)), CALL(GETATTR(REF(self), unique_assignment); CALL(GETATTR(REF(self), get_employee); GETATTR(REF(e1), team_lead)))).e1:= $e1) = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint2.self:= $self.unique_assignment:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint2.self:= $self.get_employee:?->Any(team_lead(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint2.COMP(==; CALL(GETATTR(REF(self), unique_assignment); REF(e1)), CALL(GETATTR(REF(self), unique_assignment); CALL(GETATTR(REF(self), get_employee); GETATTR(REF(e1), team_lead)))).e1:= $e1)))"; DEFINE self.office_type_by_employee_type(t_emp:@EmployeeType): @OfficeType = next(STREAM(office_type(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function office_type_by_employee_type.GETATTR(REF(entry), office_type).entry:= $entry) FOR entry IN office_type_by_employee_type_table(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function office_type_by_employee_type.self:= $self) S.T. employee_type(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function office_type_by_employee_type.GETATTR(REF(entry), office_type).entry:= $entry) = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function office_type_by_employee_type.t_emp:= $t_emp)); DEFINE @*python-builtins*.optimistic_client.meta.utils.memoize:= $memoize self.get_employee(number:Any): Any = next(STREAM(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_employee.REF(m).m:= $m FOR m IN employees(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_employee.self:= $self) S.T. number(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_employee.REF(m).m:= $m) = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_employee.number:= $number)); DEFINE self.occupancy(f1:Any, o1:Any): Any = *python-builtins*.optimistic_client.meta.utils.count(STREAM(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function occupancy.REF(e1).e1:= $e1 FOR e1 IN employees(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function occupancy.self:= $self) S.T. *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function occupancy.self:= $self.office_type_by_employee_type:?->Any(type(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function occupancy.REF(e1).e1:= $e1)) = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function occupancy.o1:= $o1 ∧ *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function occupancy.self:= $self.unique_assignment:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function occupancy.REF(e1).e1:= $e1) = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function occupancy.f1:= $f1)); DEFINE self.get_office_availability(f1:Any, o1:Any): Any = next(STREAM(rooms(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_office_availability.GETATTR(REF(a), rooms).a:= $a) FOR a IN building(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_office_availability.self:= $self) S.T. floor(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_office_availability.GETATTR(REF(a), rooms).a:= $a) = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_office_availability.f1:= $f1 ∧ office_type(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_office_availability.GETATTR(REF(a), rooms).a:= $a) = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function get_office_availability.o1:= $o1)); DEFINE @*python-builtins*.optimistic_client.meta.utils.constraint:= $constraint self.constraint3(): Boolean = ∀o1 ∈ *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_2.OfficeType:= $OfficeType.members:?->Any() FOR f1 IN *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint3.self:= $self.all_floors:?->Any(). *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint3.self:= $self.occupancy:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint3.COMP(<=; CALL(GETATTR(REF(self), occupancy); REF(f1), REF(o1)), OP(*; GETATTR(REF(o1), max_occupancy), CALL(GETATTR(REF(self), get_office_availability); REF(f1), REF(o1)))).f1:= $f1, *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint3.COMP(<=; CALL(GETATTR(REF(self), occupancy); REF(f1), REF(o1)), OP(*; GETATTR(REF(o1), max_occupancy), CALL(GETATTR(REF(self), get_office_availability); REF(f1), REF(o1)))).o1:= $o1) ≤ max_occupancy(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint3.COMP(<=; CALL(GETATTR(REF(self), occupancy); REF(f1), REF(o1)), OP(*; GETATTR(REF(o1), max_occupancy), CALL(GETATTR(REF(self), get_office_availability); REF(f1), REF(o1)))).o1:= $o1) * *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint3.self:= $self.get_office_availability:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint3.COMP(<=; CALL(GETATTR(REF(self), occupancy); REF(f1), REF(o1)), OP(*; GETATTR(REF(o1), max_occupancy), CALL(GETATTR(REF(self), get_office_availability); REF(f1), REF(o1)))).f1:= $f1, *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function constraint3.COMP(<=; CALL(GETATTR(REF(self), occupancy); REF(f1), REF(o1)), OP(*; GETATTR(REF(o1), max_occupancy), CALL(GETATTR(REF(self), get_office_availability); REF(f1), REF(o1)))).o1:= $o1); DEFINE self.area_utilization(area:@Area, f1:@Floor): Integer = *python-builtins*.optimistic_client.meta.utils.count(STREAM(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function area_utilization.REF(e1).e1:= $e1 FOR e1 IN employees(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function area_utilization.self:= $self) S.T. is_team_lead(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function area_utilization.REF(e1).e1:= $e1) ∧ area(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function area_utilization.REF(e1).e1:= $e1) = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function area_utilization.area:= $area ∧ *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function area_utilization.self:= $self.unique_assignment:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function area_utilization.REF(e1).e1:= $e1) = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function area_utilization.f1:= $f1)); DEFINE self.cost_penalty(area:@Area, f1:@Floor): Number = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function cost_penalty.self:= $self.area_utilization:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function cost_penalty.area:= $area, *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function cost_penalty.f1:= $f1) = 0 ? 0.0 : 1.0; DEFINE self.assigned_offices(o1:@OfficeType, f1:@Floor): Integer = *python-builtins*.math.ceil(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function assigned_offices.self:= $self.occupancy:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function assigned_offices.f1:= $f1, *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function assigned_offices.o1:= $o1) / max_occupancy(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function assigned_offices.o1:= $o1)); DEFINE self.total_cost(): Number = sum(STREAM(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function total_cost.self:= $self.assigned_offices:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function total_cost.OP(*; CALL(GETATTR(REF(self), assigned_offices); REF(o1), REF(f1)), GETATTR(REF(o1), cost)).o1:= $o1, *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function total_cost.OP(*; CALL(GETATTR(REF(self), assigned_offices); REF(o1), REF(f1)), GETATTR(REF(o1), cost)).f1:= $f1) * cost(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function total_cost.OP(*; CALL(GETATTR(REF(self), assigned_offices); REF(o1), REF(f1)), GETATTR(REF(o1), cost)).o1:= $o1) FOR o1 IN *python-builtins*.optimistic_examples.room_allocation.room_allocation_bom_2.OfficeType:= $OfficeType.members:?->Any() FOR f1 IN *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function total_cost.self:= $self.all_floors:?->Any())); DEFINE @*python-builtins*.optimistic_client.meta.utils.minimize(weight=20000) self.objective1(): Any = BODY DOC="
        Minimize penalties of spreading areas over multiple floors
        " VALUE="sum(STREAM(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function objective1.self:= $self.cost_penalty:?->Any(*python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function objective1.CALL(GETATTR(REF(self), cost_penalty); REF(a1), REF(f1)).a1:= $a1, *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function objective1.CALL(GETATTR(REF(self), cost_penalty); REF(a1), REF(f1)).f1:= $f1) FOR a1 IN *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function objective1.self:= $self.all_areas:?->Any() FOR f1 IN *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function objective1.self:= $self.all_floors:?->Any()))"; DEFINE @*python-builtins*.optimistic_client.meta.utils.minimize:= $minimize self.objective2(): Any = *python-builtins*.room_allocation_bom_4.Class RoomAllocationProblem4.Function objective2.self:= $self.total_cost:?->Any())
