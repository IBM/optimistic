Module [experiment.room_allocation_bom_8] - Expression: 
Math-Module(ALIAS Area AS Integer; ALIAS Floor AS String; ALIAS EmployeeType AS String; ALIAS OfficeType AS String; ALIAS EmployeeId AS String; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*) OfficeTypeInfo:  max_occupancy: Integer; type_name: @*python-builtins*.experiment.room_allocation_bom_8.OfficeType (Primary key); cost: Number; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) OfficeAvailability:  floor: @*python-builtins*.experiment.room_allocation_bom_8.Floor (Primary key); office_type: @*python-builtins*.experiment.room_allocation_bom_8.OfficeType (Primary key); rooms: Integer; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) Employee($Resource):  type: @*python-builtins*.experiment.room_allocation_bom_8.EmployeeType; number: @*python-builtins*.experiment.room_allocation_bom_8.EmployeeId (Primary key); team_lead: @*python-builtins*.experiment.room_allocation_bom_8.EmployeeId; is_team_lead: Boolean; is_independent: Boolean; area: @*python-builtins*.experiment.room_allocation_bom_8.Area; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) FloorAssignment($Assignment):  resource: @*python-builtins*.experiment.room_allocation_bom_8.EmployeeId; activity: @*python-builtins*.experiment.room_allocation_bom_8.Floor; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) OfficeTypeByEmployeeType:  employee_type: @*python-builtins*.experiment.room_allocation_bom_8.EmployeeType (Primary key); office_type: @*python-builtins*.experiment.room_allocation_bom_8.OfficeType; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) RoomAllocationProblem8($OptimizationProblem, $UniqueAssignment): DOC="
    Optimization problem of allocating employees to offices.

    This version uses the minimal number of type annotations necessary to generate the optimization specification.
    " solution: Set[@*python-builtins*.experiment.room_allocation_bom_8.FloorAssignment]; employees: Collection[@*python-builtins*.experiment.room_allocation_bom_8.Employee]; building: Collection[@*python-builtins*.experiment.room_allocation_bom_8.OfficeAvailability]; office_type_by_employee_type_table: Collection[@*python-builtins*.experiment.room_allocation_bom_8.OfficeTypeByEmployeeType]; office_info: Collection[@*python-builtins*.experiment.room_allocation_bom_8.OfficeTypeInfo]; DEFINE self.all_floors(): Any = SET floor($a) FOR a IN building($self); DEFINE self.all_areas(): Any = SET area($e) FOR e IN employees($self); DEFINE self.all_employees(): Any = SET number($e) FOR e IN employees($self); DEFINE self.all_office_types(): Any = SET office_type($ofc) FOR ofc IN office_type_by_employee_type_table($self); DEFINE self.get_office_info(ot:@*python-builtins*.experiment.room_allocation_bom_8.OfficeType): Any = next(STREAM($oti FOR oti IN office_info($self) S.T. type_name($oti) = $ot)); DEFINE self.office_type_by_employee_type(t_emp:Any): Any = next(STREAM(office_type($entry) FOR entry IN office_type_by_employee_type_table($self) S.T. employee_type($entry) = $t_emp)); DEFINE self.get_office_availability(f1:Any, o1:Any): Any = next(STREAM(rooms($a) FOR a IN building($self) S.T. floor($a) = $f1 ∧ office_type($a) = $o1)); DEFINE @$constraint self.same_floor(): Any = BODY DOC="
        Each employee must be assigned to the same floor as his/her team lead unless the team lead is independent
        " VALUE="∀e1 ∈ employees($self) S.T. ¬is_independent($self.get_employee(team_lead($e1))). $self.unique_assignment(number($e1)) = $self.unique_assignment(team_lead($e1))"; DEFINE self.get_employee(number:Any): Any = next(STREAM($m FOR m IN employees($self) S.T. number($m) = $number)); DEFINE self.occupancy(f1:@*python-builtins*.experiment.room_allocation_bom_8.Floor, o1:Any): Any = BODY DOC="
        How many employees who need to be in offices of type o1 are placed on floor f1
        " VALUE="count(STREAM($e1 FOR e1 IN employees($self) S.T. $self.office_type_by_employee_type(type($e1)) = $o1 ∧ $self.unique_assignment(number($e1)) = $f1))"; DEFINE @$constraint self.availability_constraint(): Any = ∀o1 ∈ $self.all_office_types() FOR f1 IN $self.all_floors(). $self.occupancy($f1, $o1) ≤ max_occupancy($self.get_office_info($o1)) * $self.get_office_availability($f1, $o1); DEFINE self.assigned_offices(o1:@*python-builtins*.experiment.room_allocation_bom_8.OfficeType, f1:@*python-builtins*.experiment.room_allocation_bom_8.Floor): Integer = ceil($self.occupancy($f1, $o1) / max_occupancy($self.get_office_info($o1))); DEFINE @$minimize self.cost_objective(): Any = Σ $self.assigned_offices($o1, $f1) * cost($self.get_office_info($o1)) FOR o1 IN $self.all_office_types() FOR f1 IN $self.all_floors(); DEFINE self.area_utilization(area:Any, f1:@*python-builtins*.experiment.room_allocation_bom_8.Floor): Any = count(STREAM($e1 FOR e1 IN employees($self) S.T. is_team_lead($e1) ∧ area($e1) = $area ∧ $self.unique_assignment(number($e1)) = $f1)); DEFINE self.area_penalty(area:@*python-builtins*.experiment.room_allocation_bom_8.Area, f1:@*python-builtins*.experiment.room_allocation_bom_8.Floor): Any = $self.area_utilization($area, $f1) = 0 ? 0.0 : 1.0; DEFINE @minimize(weight=20000) self.area_objective(): Any = BODY DOC="
        Minimize penalties of spreading areas over multiple floors
        " VALUE="Σ $self.area_penalty($a1, $f1) FOR a1 IN $self.all_areas() FOR f1 IN $self.all_floors()")


Module [resource_allocation_bom_2] - Expression: 
Math-Module(ALIAS ResourceType AS String; ALIAS Activity AS String; DATA-CLASS @dataclass(frozen=True*Boolean*) Resource:  type: @*python-builtins*.resource_allocation_bom_2.ResourceType; DATA-CLASS @dataclass(frozen=True*Boolean*) Assignment:  resource: @*python-builtins*.resource_allocation_bom_2.Resource; activity: @*python-builtins*.resource_allocation_bom_2.Activity)


