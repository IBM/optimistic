OPTIMISTIC_START
Math-Module(DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) Area:  name: String; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) Floor:  desginator: String; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) OfficeAvailability:  floor: @Floor (Primary key); office_type: @OfficeType (Primary key); rooms: Integer; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) Employee($Resource):  type: @EmployeeType; number: Integer (Primary key); team_lead: Integer; is_team_lead: Boolean; is_independent: Boolean; area: @Area; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) FloorAssignment($Assignment):  resource: @Employee; activity: @Floor; DATA-CLASS @dataclass(unsafe_hash=True*Boolean*, frozen=True*Boolean*) RoomAllocationProblem3($OptimizationProblem, $UniqueAssignment): DOC="
    Optimization problem of allocating employees to offices
    " solution: Set[@FloorAssignment]; employees: Collection[@Employee]; building: Collection[@OfficeAvailability]; areas: Collection[@Area]; DEFINE @$constraint self.legal_assignment(): Any = ∀a ∈ solution($self). (resource($a) ∈ employees($self) ∧ activity($a) ∈ floors($self)); DEFINE @$constraint self.constraint2(): Boolean = BODY DOC="
        Each employee must be assigned to the same floor as his/her team lead unless the team lead is independent
        " VALUE="∀e1 ∈ employees($self) S.T. ¬is_independent($self.get_employee(team_lead($e1))). $self.unique_assignment($e1) = $self.unique_assignment($self.get_employee(team_lead($e1)))"; DEFINE @$staticmethod office_type_by_employee_type(t_emp:@EmployeeType): @OfficeType = $OFFICE_TYPE_BY_EMPLOYEE_TYPE[$t_emp]; DEFINE @$memoize self.get_employee(number:Any): Any = next(STREAM($m FOR m IN employees($self) S.T. number($m) = $number)); DEFINE self.occupancy(f1:Any, o1:Any): Any = count(STREAM($e1 FOR e1 IN employees($self) S.T. $self.office_type_by_employee_type(type($e1)) = $o1 ∧ $self.unique_assignment($e1) = $f1)); DEFINE self.get_office_availability(f1:Any, o1:Any): Any = next(STREAM(rooms($a) FOR a IN building($self) S.T. floor($a) = $f1 ∧ office_type($a) = $o1)); DEFINE @$constraint self.constraint3(): Boolean = ∀o1 ∈ $OfficeType.members() FOR f1 IN floors($self). $self.occupancy($f1, $o1) ≤ max_occupancy($o1) * $self.get_office_availability($f1, $o1); DEFINE self.area_utilization(area:@Area, f1:@Floor): Integer = count(STREAM($e1 FOR e1 IN employees($self) S.T. is_team_lead($e1) ∧ area($e1) = name($area) ∧ $self.unique_assignment($e1) = $f1)); DEFINE self.cost_penalty(area:@Area, f1:@Floor): Number = $self.area_utilization($area, $f1) = 0 ? 0.0 : 1.0; DEFINE self.assigned_offices(o1:@OfficeType, f1:@Floor): Integer = $math.ceil($self.occupancy($f1, $o1) / max_occupancy($o1)); DEFINE self.total_cost(): Number = sum(STREAM($self.assigned_offices($o1, $f1) * cost($o1) FOR o1 IN $OfficeType.members() FOR f1 IN floors($self))); DEFINE @minimize(weight=20000) self.objective1(): Any = sum(STREAM($self.cost_penalty($a1, $f1) FOR a1 IN areas($self) FOR f1 IN floors($self))); DEFINE @$minimize self.objective2(): Any = $self.total_cost())
OPTIMISTIC_END

