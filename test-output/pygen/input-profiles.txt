the sum of the duration of l1 for all Legs l1 in d1 such that the type of l1 is in {"Flight", "Travel", "Other-carrier", "Simulator"} is between 12.01 and 14
(profile (condition (expr (aggregate (article the) sum of (expr (attribute (noun_phrase (article the) duration) of (expr (atomic_expr l1)))) for all (type_name Legs) l1 in (expr (atomic_expr d1)) (such_that such that (condition (expr (attribute (noun_phrase (article the) type) of (expr (atomic_expr l1)))) (to_be is) in (general_set { (expr (atomic_expr "Flight")) , (expr (atomic_expr "Travel")) , (expr (atomic_expr "Other-carrier")) , (expr (atomic_expr "Simulator")) }))))) (to_be is) between (expr (atomic_expr (quantity 12.01))) and (expr (atomic_expr (quantity 14)))) <EOF>)
12.01 ≤ Σ duration($l1) FOR l1:@Leg IN $d1 S.T. type($l1) ∈ {"Flight", "Travel", "Other-carrier", "Simulator"} ≤ 14
the sum of the duration of l1 for all Legs l1 in d1 such that the type of l1 is in {"Flight", "Travel", "Other-carrier", "Simulator"} is at least 12
(profile (condition (expr (aggregate (article the) sum of (expr (attribute (noun_phrase (article the) duration) of (expr (atomic_expr l1)))) for all (type_name Legs) l1 in (expr (atomic_expr d1)) (such_that such that (condition (expr (attribute (noun_phrase (article the) type) of (expr (atomic_expr l1)))) (to_be is) in (general_set { (expr (atomic_expr "Flight")) , (expr (atomic_expr "Travel")) , (expr (atomic_expr "Other-carrier")) , (expr (atomic_expr "Simulator")) }))))) (comparison_operator (to_be is) at least) (expr (atomic_expr (quantity 12)))) <EOF>)
Σ duration($l1) FOR l1:@Leg IN $d1 S.T. type($l1) ∈ {"Flight", "Travel", "Other-carrier", "Simulator"} ≥ 12
the departure station of the first Leg of d1 is a base station and the arrival station of the last leg of d1 is not a base station
(profile (condition (condition (expr (attribute (noun_phrase (article the) departure station) of (expr (attribute (noun_phrase (article the) first Leg) of (expr (atomic_expr d1)))))) (unary_predicate (to_be is) (phrase (noun_phrase (article a) base station)))) and (condition (expr (attribute (noun_phrase (article the) arrival station) of (expr (attribute (noun_phrase (article the) last leg) of (expr (atomic_expr d1)))))) (unary_predicate (to_be is) not (phrase (noun_phrase (article a) base station))))) <EOF>)
base-station(departure-station(first-Leg($d1))) ∧ ¬base-station(arrival-station(last-leg($d1)))
there is a leg l1 in d1 such that l1 visits "CAI" and the flight-number of l1 is in {400, 401}
(profile (condition (existential there (to_be is) (article a) (type_name leg) l1 in (expr (atomic_expr d1)) (such_that such that (condition (condition (expr (atomic_expr l1)) (predicate (phrase (noun_phrase visits))) (expr (atomic_expr "CAI"))) and (condition (expr (attribute (noun_phrase (article the) flight-number) of (expr (atomic_expr l1)))) (to_be is) in (general_set { (expr (atomic_expr (quantity 400))) , (expr (atomic_expr (quantity 401))) })))))) <EOF>)
∃l1:@Leg ∈ $d1. (visits($l1, "CAI") ∧ flight-number($l1) ∈ {400, 401})
the departure station of l1 is a base station and the arrival station of l1 is not a base station and (the departure station or the arrival station) of l1 is in {"HAV", "MIA", "IAD"}
(profile (condition (condition (condition (expr (attribute (noun_phrase (article the) departure station) of (expr (atomic_expr l1)))) (unary_predicate (to_be is) (phrase (noun_phrase (article a) base station)))) and (condition (expr (attribute (noun_phrase (article the) arrival station) of (expr (atomic_expr l1)))) (unary_predicate (to_be is) not (phrase (noun_phrase (article a) base station))))) and (condition (expr (attribute ( (disjunction_of_np (noun_phrase (article the) departure station) or (noun_phrase (article the) arrival station)) ) of (expr (atomic_expr l1)))) (to_be is) in (general_set { (expr (atomic_expr "HAV")) , (expr (atomic_expr "MIA")) , (expr (atomic_expr "IAD")) }))) <EOF>)
base-station(departure-station($l1)) ∧ ¬base-station(arrival-station($l1)) ∧ (departure-station($l1) ∈ {"HAV", "MIA", "IAD"} ∨ arrival-station($l1) ∈ {"HAV", "MIA", "IAD"})
every Leg l1 of d1 is abroad, and the arrival station of l1 is not a base station, and the duration of d1 is at most 12
(profile (condition (universal every (type_name Leg) l1 of (expr (atomic_expr d1)) is (predicate (phrase (noun_phrase abroad))) , and (condition (condition (expr (attribute (noun_phrase (article the) arrival station) of (expr (atomic_expr l1)))) (unary_predicate (to_be is) not (phrase (noun_phrase (article a) base station)))) , and (condition (expr (attribute (noun_phrase (article the) duration) of (expr (atomic_expr d1)))) (comparison_operator (to_be is) at most) (expr (atomic_expr (quantity 12))))))) <EOF>)
∀l1:@Leg ∈ $d1. (abroad($l1) ∧ ¬base-station(arrival-station($l1)) ∧ duration($d1) ≤ 12)
every Leg l1 of d1 is abroad and the arrival station of l1 is not a base station, and the duration of d1 is at most 12
(profile (condition (universal every (type_name Leg) l1 of (expr (atomic_expr d1)) is (predicate (phrase (noun_phrase abroad))) and (condition (condition (expr (attribute (noun_phrase (article the) arrival station) of (expr (atomic_expr l1)))) (unary_predicate (to_be is) not (phrase (noun_phrase (article a) base station)))) , and (condition (expr (attribute (noun_phrase (article the) duration) of (expr (atomic_expr d1)))) (comparison_operator (to_be is) at most) (expr (atomic_expr (quantity 12))))))) <EOF>)
∀l1:@Leg ∈ $d1. (abroad($l1) ∧ ¬base-station(arrival-station($l1)) ∧ duration($d1) ≤ 12)
every Leg l1 of d1 is abroad and the arrival station of l1 is not a base station and the duration of d1 is at most 12
(profile (condition (universal every (type_name Leg) l1 of (expr (atomic_expr d1)) is (predicate (phrase (noun_phrase abroad))) and (condition (condition (expr (attribute (noun_phrase (article the) arrival station) of (expr (atomic_expr l1)))) (unary_predicate (to_be is) not (phrase (noun_phrase (article a) base station)))) and (condition (expr (attribute (noun_phrase (article the) duration) of (expr (atomic_expr d1)))) (comparison_operator (to_be is) at most) (expr (atomic_expr (quantity 12))))))) <EOF>)
∀l1:@Leg ∈ $d1. (abroad($l1) ∧ ¬base-station(arrival-station($l1)) ∧ duration($d1) ≤ 12)
every Leg l1 of d1 is abroad, and the arrival station of l1 is not a base station and the duration of d1 is at most 12
(profile (condition (universal every (type_name Leg) l1 of (expr (atomic_expr d1)) is (predicate (phrase (noun_phrase abroad))) , and (condition (condition (expr (attribute (noun_phrase (article the) arrival station) of (expr (atomic_expr l1)))) (unary_predicate (to_be is) not (phrase (noun_phrase (article a) base station)))) and (condition (expr (attribute (noun_phrase (article the) duration) of (expr (atomic_expr d1)))) (comparison_operator (to_be is) at most) (expr (atomic_expr (quantity 12))))))) <EOF>)
∀l1:@Leg ∈ $d1. (abroad($l1) ∧ ¬base-station(arrival-station($l1)) ∧ duration($d1) ≤ 12)
there is a Leg l1 in t1 such that the activity of l1 is "ALV"
(profile (condition (existential there (to_be is) (article a) (type_name Leg) l1 in (expr (atomic_expr t1)) (such_that such that (condition (expr (attribute (noun_phrase (article the) activity) of (expr (atomic_expr l1)))) (to_be is) (atomic_expr "ALV"))))) <EOF>)
∃l1:@Leg ∈ $t1. activity($l1) = "ALV"
there is a Leg l1 in t1 such that the activity of l1 is "SBY" and the length of (the intersection of the period of l1 and 08:00-20:00) is at least 20% of 12 and the type of the aircraft of l1 is in {"77W", "333", "332"}
(profile (condition (existential there (to_be is) (article a) (type_name Leg) l1 in (expr (atomic_expr t1)) (such_that such that (condition (condition (condition (expr (attribute (noun_phrase (article the) activity) of (expr (atomic_expr l1)))) (to_be is) (atomic_expr "SBY")) and (condition (expr (attribute (noun_phrase (article the) length) of (expr ( (expr (function (function_name the intersection) of (expr (attribute (noun_phrase (article the) period) of (expr (atomic_expr l1)))) and (expr (atomic_expr (period 08:00 - 20:00))))) )))) (comparison_operator (to_be is) at least) (expr (function 20% of (expr (atomic_expr (quantity 12))))))) and (condition (expr (attribute (noun_phrase (article the) type) of (expr (attribute (noun_phrase (article the) aircraft) of (expr (atomic_expr l1)))))) (to_be is) in (general_set { (expr (atomic_expr "77W")) , (expr (atomic_expr "333")) , (expr (atomic_expr "332")) })))))) <EOF>)
∃l1:@Leg ∈ $t1. (activity($l1) = "SBY" ∧ length(period($l1) ∩ [08:00-20:00]) ≥ *percent-of*(20%, 12) ∧ type(aircraft($l1)) ∈ {"77W", "333", "332"})
there is a Leg l1 in d1 such that l1 visits "LAX" and for all Leg l2 in d1, the type of l2 is not "Travel"
(profile (condition (existential there (to_be is) (article a) (type_name Leg) l1 in (expr (atomic_expr d1)) (such_that such that (condition (condition (expr (atomic_expr l1)) (predicate (phrase (noun_phrase visits))) (expr (atomic_expr "LAX"))) and (condition (universal for all (type_name Leg) l2 in (expr (atomic_expr d1)) , (condition (expr (attribute (noun_phrase (article the) type) of (expr (atomic_expr l2)))) (to_be is) not (atomic_expr "Travel")))))))) <EOF>)
∃l1:@Leg ∈ $d1. (visits($l1, "LAX") ∧ ∀l2:@Leg ∈ $d1. type($l2) ≠ "Travel")
there are different Legs l1, l2 in d1 such that l1 is operational and l2 is operational and the type of the aircraft of l1 is "77W" and the type of the aircraft of l2 is "77W" and the flight-number of (l1 or l2) is 504
(profile (condition (existential there (to_be are) different (type_name Legs) l1 , l2 in (expr (atomic_expr d1)) (such_that such that (condition (condition (condition (condition (condition (expr (atomic_expr l1)) (unary_predicate (to_be is) (phrase (noun_phrase operational)))) and (condition (expr (atomic_expr l2)) (unary_predicate (to_be is) (phrase (noun_phrase operational))))) and (condition (expr (attribute (noun_phrase (article the) type) of (expr (attribute (noun_phrase (article the) aircraft) of (expr (atomic_expr l1)))))) (to_be is) (atomic_expr "77W"))) and (condition (expr (attribute (noun_phrase (article the) type) of (expr (attribute (noun_phrase (article the) aircraft) of (expr (atomic_expr l2)))))) (to_be is) (atomic_expr "77W"))) and (condition (expr (attribute (noun_phrase (article the) flight-number) of (expr ( (expr (expr (atomic_expr l1)) or (expr (atomic_expr l2))) )))) (to_be is) (atomic_expr (quantity 504))))))) <EOF>)
∃l1:@Leg ∈ $d1. ∃l2:@Leg ∈ $d1. (*different*($l1, $l2) ∧ operational($l1) ∧ operational($l2) ∧ type(aircraft($l1)) = "77W" ∧ type(aircraft($l2)) = "77W" ∧ (flight-number($l1) = 504 ∨ flight-number($l2) = 504))
there is a Leg l1 in p1 such that l1 visits USA and there is a Leg l2 in p1 such that the type of l2 is "Travel"
(profile (condition (existential there (to_be is) (article a) (type_name Leg) l1 in (expr (atomic_expr p1)) (such_that such that (condition (condition (expr (atomic_expr l1)) (predicate (phrase (noun_phrase visits))) (expr (noun_phrase USA))) and (condition (existential there (to_be is) (article a) (type_name Leg) l2 in (expr (atomic_expr p1)) (such_that such that (condition (expr (attribute (noun_phrase (article the) type) of (expr (atomic_expr l2)))) (to_be is) (atomic_expr "Travel"))))))))) <EOF>)
∃l1:@Leg ∈ $p1. (visits($l1, USA) ∧ ∃l2:@Leg ∈ $p1. type($l2) = "Travel")
there are Legs l1, l2, l3 in d1 such that for each l0 in {l1, l2, l3}, l0 is operational and the flight-number of l0 is in {2800, 1370, 1226, 2100, 2118}
(profile (condition (existential there (to_be are) (type_name Legs) l1 , l2 , l3 in (expr (atomic_expr d1)) (such_that such that (condition (universal for each l0 in (expr (general_set { (expr (atomic_expr l1)) , (expr (atomic_expr l2)) , (expr (atomic_expr l3)) })) , (condition (condition (expr (atomic_expr l0)) (unary_predicate (to_be is) (phrase (noun_phrase operational)))) and (condition (expr (attribute (noun_phrase (article the) flight-number) of (expr (atomic_expr l0)))) (to_be is) in (general_set { (expr (atomic_expr (quantity 2800))) , (expr (atomic_expr (quantity 1370))) , (expr (atomic_expr (quantity 1226))) , (expr (atomic_expr (quantity 2100))) , (expr (atomic_expr (quantity 2118))) })))))))) <EOF>)
∃l1:@Leg ∈ $d1. ∃l2:@Leg ∈ $d1. ∃l3:@Leg ∈ $d1. ∀l0 ∈ {$l1, $l2, $l3}. (operational($l0) ∧ flight-number($l0) ∈ {2800, 1370, 1226, 2100, 2118})
the departure station of the first Leg of p1 is "SVO" and there is a Duty d1 in p1 such that the departure station of the first Leg of d1 is "KJA" and d1 is not quicky
(profile (condition (condition (expr (attribute (noun_phrase (article the) departure station) of (expr (attribute (noun_phrase (article the) first Leg) of (expr (atomic_expr p1)))))) (to_be is) (atomic_expr "SVO")) and (condition (existential there (to_be is) (article a) (type_name Duty) d1 in (expr (atomic_expr p1)) (such_that such that (condition (condition (expr (attribute (noun_phrase (article the) departure station) of (expr (attribute (noun_phrase (article the) first Leg) of (expr (atomic_expr d1)))))) (to_be is) (atomic_expr "KJA")) and (condition (expr (atomic_expr d1)) (unary_predicate (to_be is) not (phrase (noun_phrase quicky))))))))) <EOF>)
departure-station(first-Leg($p1)) = "SVO" ∧ ∃d1:@Duty ∈ $p1. (departure-station(first-Leg($d1)) = "KJA" ∧ ¬quicky($d1))
the departure station of the first Leg of p1 is "SVO" and there are Legs l1 and l2 in p1 such that l2 follows l1 in p and l1 visits X and l2 visits Y
(profile (condition (condition (expr (attribute (noun_phrase (article the) departure station) of (expr (attribute (noun_phrase (article the) first Leg) of (expr (atomic_expr p1)))))) (to_be is) (atomic_expr "SVO")) and (condition (existential there (to_be are) (type_name Legs) l1 and l2 in (expr (atomic_expr p1)) (such_that such that (condition (condition (condition (expr (atomic_expr l2)) (temporal_operator follows) (expr (atomic_expr l1)) in (expr (noun_phrase p))) and (condition (expr (atomic_expr l1)) (predicate (phrase (noun_phrase visits))) (expr (noun_phrase X)))) and (condition (expr (atomic_expr l2)) (predicate (phrase (noun_phrase visits))) (expr (noun_phrase Y)))))))) <EOF>)
departure-station(first-Leg($p1)) = "SVO" ∧ ∃l1:@Leg ∈ $p1. ∃l2:@Leg ∈ $p1. (*t-after*($l2, $l1, p) ∧ visits($l1, X) ∧ visits($l2, Y))
there are Duties d1 and d2 in p1 such that d1 has one Leg l1 and d2 has one Leg l2 such that the departure station of l1 is "SVO" and the arrival station of l2 is "KJA" and d2 immediately follows d1 in p1
(profile (condition (existential there (to_be are) (type_name Duties) d1 and d2 in (expr (atomic_expr p1)) (such_that such that (condition (binding_existential_with_unique (binding_existential_with_unique1 (expr (atomic_expr d1)) has one (type_name Leg) l1) and (binding_existential_with_unique1 (expr (atomic_expr d2)) has one (type_name Leg) l2) (such_that such that (condition (condition (condition (expr (attribute (noun_phrase (article the) departure station) of (expr (atomic_expr l1)))) (to_be is) (atomic_expr "SVO")) and (condition (expr (attribute (noun_phrase (article the) arrival station) of (expr (atomic_expr l2)))) (to_be is) (atomic_expr "KJA"))) and (condition (expr (atomic_expr d2)) (temporal_operator immediately follows) (expr (atomic_expr d1)) in (expr (atomic_expr p1)))))))))) <EOF>)
∃d1:@Duty ∈ $p1. ∃d2:@Duty ∈ $p1. ∃!l1:@Leg ∈ $d1. ∃!l2:@Leg ∈ $d2. (departure-station($l1) = "SVO" ∧ arrival-station($l2) = "KJA" ∧ *t-meets-inverse*($d2, $d1, $p1))
