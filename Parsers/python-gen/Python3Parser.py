# Generated from D:/Yishai/ws/pycharm/Parsers/python3-py/Python3.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,98,1110,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,1,0,1,0,1,0,1,0,1,0,3,0,194,8,0,1,1,1,1,5,
        1,198,8,1,10,1,12,1,201,9,1,1,1,1,1,1,2,1,2,5,2,207,8,2,10,2,12,
        2,210,9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,218,8,3,1,3,3,3,221,8,3,1,
        3,1,3,1,4,4,4,226,8,4,11,4,12,4,227,1,5,1,5,1,5,1,6,1,6,1,6,3,6,
        236,8,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,246,8,8,1,8,1,8,1,8,
        1,9,1,9,3,9,253,8,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,261,8,10,1,
        10,1,10,1,10,1,10,1,10,3,10,268,8,10,3,10,270,8,10,3,10,272,8,10,
        1,10,1,10,1,10,3,10,277,8,10,3,10,279,8,10,3,10,281,8,10,1,10,1,
        10,3,10,285,8,10,1,10,1,10,1,10,1,10,3,10,291,8,10,5,10,293,8,10,
        10,10,12,10,296,9,10,1,10,1,10,1,10,1,10,3,10,302,8,10,3,10,304,
        8,10,3,10,306,8,10,1,10,1,10,1,10,3,10,311,8,10,3,10,313,8,10,1,
        11,1,11,1,11,3,11,318,8,11,1,11,1,11,1,11,1,11,3,11,324,8,11,5,11,
        326,8,11,10,11,12,11,329,9,11,1,12,1,12,1,12,1,12,3,12,335,8,12,
        5,12,337,8,12,10,12,12,12,340,9,12,1,13,1,13,1,13,3,13,345,8,13,
        1,14,1,14,1,14,3,14,350,8,14,1,14,1,14,1,14,1,14,3,14,356,8,14,5,
        14,358,8,14,10,14,12,14,361,9,14,1,14,1,14,1,14,3,14,366,8,14,1,
        14,1,14,1,14,1,14,3,14,372,8,14,5,14,374,8,14,10,14,12,14,377,9,
        14,1,14,1,14,1,14,1,14,3,14,383,8,14,3,14,385,8,14,3,14,387,8,14,
        1,14,1,14,1,14,3,14,392,8,14,3,14,394,8,14,3,14,396,8,14,1,14,1,
        14,3,14,400,8,14,1,14,1,14,1,14,1,14,3,14,406,8,14,5,14,408,8,14,
        10,14,12,14,411,9,14,1,14,1,14,1,14,1,14,3,14,417,8,14,3,14,419,
        8,14,3,14,421,8,14,1,14,1,14,1,14,3,14,426,8,14,3,14,428,8,14,1,
        15,1,15,1,16,1,16,3,16,434,8,16,1,17,1,17,1,17,5,17,439,8,17,10,
        17,12,17,442,9,17,1,17,3,17,445,8,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,3,18,457,8,18,1,19,1,19,1,19,1,19,1,19,3,
        19,464,8,19,3,19,466,8,19,1,19,1,19,1,19,1,19,3,19,472,8,19,5,19,
        474,8,19,10,19,12,19,477,9,19,3,19,479,8,19,1,20,1,20,1,20,1,20,
        3,20,485,8,20,1,21,1,21,1,21,5,21,490,8,21,10,21,12,21,493,9,21,
        1,21,3,21,496,8,21,1,22,1,22,3,22,500,8,22,1,23,1,23,1,24,1,24,1,
        24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,3,26,514,8,26,1,27,1,27,1,
        28,1,28,1,29,1,29,3,29,522,8,29,1,30,1,30,1,31,1,31,1,31,1,31,3,
        31,530,8,31,3,31,532,8,31,1,32,1,32,3,32,536,8,32,1,33,1,33,1,33,
        1,34,1,34,5,34,543,8,34,10,34,12,34,546,9,34,1,34,1,34,4,34,550,
        8,34,11,34,12,34,551,3,34,554,8,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,3,34,563,8,34,1,35,1,35,1,35,3,35,568,8,35,1,36,1,36,1,36,3,
        36,573,8,36,1,37,1,37,1,37,5,37,578,8,37,10,37,12,37,581,9,37,1,
        37,3,37,584,8,37,1,38,1,38,1,38,5,38,589,8,38,10,38,12,38,592,9,
        38,1,39,1,39,1,39,5,39,597,8,39,10,39,12,39,600,9,39,1,40,1,40,1,
        40,1,40,5,40,606,8,40,10,40,12,40,609,9,40,1,41,1,41,1,41,1,41,5,
        41,615,8,41,10,41,12,41,618,9,41,1,42,1,42,1,42,1,42,3,42,624,8,
        42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,635,8,43,1,
        44,1,44,1,44,1,44,3,44,641,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,5,45,652,8,45,10,45,12,45,655,9,45,1,45,1,45,1,45,3,
        45,660,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,669,8,46,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,680,8,47,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,4,48,689,8,48,11,48,12,48,690,1,48,1,48,
        1,48,3,48,696,8,48,1,48,1,48,1,48,3,48,701,8,48,1,48,1,48,1,48,3,
        48,706,8,48,1,49,1,49,1,49,1,49,5,49,712,8,49,10,49,12,49,715,9,
        49,1,49,1,49,1,49,1,50,1,50,1,50,3,50,723,8,50,1,51,1,51,1,51,1,
        51,3,51,729,8,51,3,51,731,8,51,1,52,1,52,1,52,1,52,4,52,737,8,52,
        11,52,12,52,738,1,52,1,52,3,52,743,8,52,1,53,1,53,1,53,1,53,1,53,
        1,53,3,53,751,8,53,1,53,3,53,754,8,53,1,54,1,54,3,54,758,8,54,1,
        55,1,55,3,55,762,8,55,1,55,1,55,1,55,1,56,1,56,3,56,769,8,56,1,56,
        1,56,1,56,1,57,1,57,1,57,5,57,777,8,57,10,57,12,57,780,9,57,1,58,
        1,58,1,58,5,58,785,8,58,10,58,12,58,788,9,58,1,59,1,59,1,59,3,59,
        793,8,59,1,60,1,60,1,60,1,60,5,60,799,8,60,10,60,12,60,802,9,60,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        3,61,817,8,61,1,62,1,62,1,62,1,63,1,63,1,63,5,63,825,8,63,10,63,
        12,63,828,9,63,1,64,1,64,1,64,5,64,833,8,64,10,64,12,64,836,9,64,
        1,65,1,65,1,65,5,65,841,8,65,10,65,12,65,844,9,65,1,66,1,66,1,66,
        5,66,849,8,66,10,66,12,66,852,9,66,1,67,1,67,1,67,5,67,857,8,67,
        10,67,12,67,860,9,67,1,68,1,68,1,68,5,68,865,8,68,10,68,12,68,868,
        9,68,1,69,1,69,1,69,3,69,873,8,69,1,70,1,70,1,70,3,70,878,8,70,1,
        71,3,71,881,8,71,1,71,1,71,5,71,885,8,71,10,71,12,71,888,9,71,1,
        72,1,72,1,72,3,72,893,8,72,1,72,1,72,1,72,3,72,898,8,72,1,72,1,72,
        1,72,3,72,903,8,72,1,72,1,72,1,72,1,72,4,72,909,8,72,11,72,12,72,
        910,1,72,1,72,1,72,1,72,3,72,917,8,72,1,73,1,73,3,73,921,8,73,1,
        74,1,74,1,74,1,75,1,75,1,75,5,75,929,8,75,10,75,12,75,932,9,75,1,
        75,3,75,935,8,75,1,76,1,76,3,76,939,8,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,3,76,948,8,76,1,77,1,77,1,77,5,77,953,8,77,10,77,12,77,
        956,9,77,1,77,3,77,959,8,77,1,78,1,78,3,78,963,8,78,1,78,1,78,3,
        78,967,8,78,1,78,1,78,3,78,971,8,78,3,78,973,8,78,3,78,975,8,78,
        1,79,1,79,1,79,5,79,980,8,79,10,79,12,79,983,9,79,1,79,3,79,986,
        8,79,1,80,1,80,3,80,990,8,80,1,81,1,81,1,81,5,81,995,8,81,10,81,
        12,81,998,9,81,1,81,3,81,1001,8,81,1,82,1,82,1,82,1,82,5,82,1007,
        8,82,10,82,12,82,1010,9,82,1,82,3,82,1013,8,82,3,82,1015,8,82,1,
        82,1,82,1,82,1,82,5,82,1021,8,82,10,82,12,82,1024,9,82,1,82,3,82,
        1027,8,82,3,82,1029,8,82,3,82,1031,8,82,1,83,1,83,1,83,1,83,1,83,
        1,83,3,83,1039,8,83,1,84,1,84,1,84,1,84,3,84,1045,8,84,1,84,3,84,
        1048,8,84,1,84,1,84,1,84,1,85,1,85,1,85,5,85,1056,8,85,10,85,12,
        85,1059,9,85,1,85,3,85,1062,8,85,1,86,1,86,3,86,1066,8,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1076,8,86,1,87,1,87,3,87,1080,
        8,87,1,88,3,88,1083,8,88,1,88,1,88,1,88,1,88,1,88,3,88,1090,8,88,
        1,89,1,89,1,89,3,89,1095,8,89,1,90,1,90,1,91,1,91,3,91,1101,8,91,
        1,92,1,92,1,92,3,92,1106,8,92,1,93,1,93,1,93,0,0,94,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,0,7,1,0,82,94,1,
        0,48,49,1,0,63,64,1,0,65,66,3,0,50,50,67,69,80,80,2,0,65,66,70,70,
        2,0,2,2,46,47,1220,0,193,1,0,0,0,2,199,1,0,0,0,4,204,1,0,0,0,6,213,
        1,0,0,0,8,225,1,0,0,0,10,229,1,0,0,0,12,235,1,0,0,0,14,237,1,0,0,
        0,16,240,1,0,0,0,18,250,1,0,0,0,20,312,1,0,0,0,22,314,1,0,0,0,24,
        338,1,0,0,0,26,341,1,0,0,0,28,427,1,0,0,0,30,429,1,0,0,0,32,433,
        1,0,0,0,34,435,1,0,0,0,36,456,1,0,0,0,38,478,1,0,0,0,40,480,1,0,
        0,0,42,486,1,0,0,0,44,499,1,0,0,0,46,501,1,0,0,0,48,503,1,0,0,0,
        50,506,1,0,0,0,52,513,1,0,0,0,54,515,1,0,0,0,56,517,1,0,0,0,58,519,
        1,0,0,0,60,523,1,0,0,0,62,525,1,0,0,0,64,535,1,0,0,0,66,537,1,0,
        0,0,68,540,1,0,0,0,70,564,1,0,0,0,72,569,1,0,0,0,74,574,1,0,0,0,
        76,585,1,0,0,0,78,593,1,0,0,0,80,601,1,0,0,0,82,610,1,0,0,0,84,619,
        1,0,0,0,86,634,1,0,0,0,88,636,1,0,0,0,90,642,1,0,0,0,92,661,1,0,
        0,0,94,670,1,0,0,0,96,681,1,0,0,0,98,707,1,0,0,0,100,719,1,0,0,0,
        102,724,1,0,0,0,104,742,1,0,0,0,106,753,1,0,0,0,108,757,1,0,0,0,
        110,759,1,0,0,0,112,766,1,0,0,0,114,773,1,0,0,0,116,781,1,0,0,0,
        118,792,1,0,0,0,120,794,1,0,0,0,122,816,1,0,0,0,124,818,1,0,0,0,
        126,821,1,0,0,0,128,829,1,0,0,0,130,837,1,0,0,0,132,845,1,0,0,0,
        134,853,1,0,0,0,136,861,1,0,0,0,138,872,1,0,0,0,140,874,1,0,0,0,
        142,880,1,0,0,0,144,916,1,0,0,0,146,920,1,0,0,0,148,922,1,0,0,0,
        150,925,1,0,0,0,152,947,1,0,0,0,154,949,1,0,0,0,156,974,1,0,0,0,
        158,976,1,0,0,0,160,989,1,0,0,0,162,991,1,0,0,0,164,1030,1,0,0,0,
        166,1038,1,0,0,0,168,1040,1,0,0,0,170,1052,1,0,0,0,172,1075,1,0,
        0,0,174,1079,1,0,0,0,176,1082,1,0,0,0,178,1091,1,0,0,0,180,1096,
        1,0,0,0,182,1098,1,0,0,0,184,1105,1,0,0,0,186,1107,1,0,0,0,188,194,
        5,38,0,0,189,194,3,34,17,0,190,191,3,86,43,0,191,192,5,38,0,0,192,
        194,1,0,0,0,193,188,1,0,0,0,193,189,1,0,0,0,193,190,1,0,0,0,194,
        1,1,0,0,0,195,198,5,38,0,0,196,198,3,32,16,0,197,195,1,0,0,0,197,
        196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,
        202,1,0,0,0,201,199,1,0,0,0,202,203,5,0,0,1,203,3,1,0,0,0,204,208,
        3,162,81,0,205,207,5,38,0,0,206,205,1,0,0,0,207,210,1,0,0,0,208,
        206,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,
        212,5,0,0,1,212,5,1,0,0,0,213,214,5,80,0,0,214,220,3,78,39,0,215,
        217,5,51,0,0,216,218,3,170,85,0,217,216,1,0,0,0,217,218,1,0,0,0,
        218,219,1,0,0,0,219,221,5,52,0,0,220,215,1,0,0,0,220,221,1,0,0,0,
        221,222,1,0,0,0,222,223,5,38,0,0,223,7,1,0,0,0,224,226,3,6,3,0,225,
        224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,
        9,1,0,0,0,229,230,3,8,4,0,230,231,3,12,6,0,231,11,1,0,0,0,232,236,
        3,168,84,0,233,236,3,16,8,0,234,236,3,14,7,0,235,232,1,0,0,0,235,
        233,1,0,0,0,235,234,1,0,0,0,236,13,1,0,0,0,237,238,5,36,0,0,238,
        239,3,16,8,0,239,15,1,0,0,0,240,241,5,3,0,0,241,242,5,39,0,0,242,
        245,3,18,9,0,243,244,5,81,0,0,244,246,3,106,53,0,245,243,1,0,0,0,
        245,246,1,0,0,0,246,247,1,0,0,0,247,248,5,54,0,0,248,249,3,104,52,
        0,249,17,1,0,0,0,250,252,5,51,0,0,251,253,3,20,10,0,252,251,1,0,
        0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,255,5,52,0,0,255,19,1,0,
        0,0,256,280,3,22,11,0,257,278,5,53,0,0,258,260,5,50,0,0,259,261,
        3,26,13,0,260,259,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,271,
        3,24,12,0,263,269,5,53,0,0,264,265,5,56,0,0,265,267,3,26,13,0,266,
        268,5,53,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,
        264,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,263,1,0,0,0,271,
        272,1,0,0,0,272,279,1,0,0,0,273,274,5,56,0,0,274,276,3,26,13,0,275,
        277,5,53,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,
        258,1,0,0,0,278,273,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,
        257,1,0,0,0,280,281,1,0,0,0,281,313,1,0,0,0,282,284,5,50,0,0,283,
        285,3,26,13,0,284,283,1,0,0,0,284,285,1,0,0,0,285,294,1,0,0,0,286,
        287,5,53,0,0,287,290,3,26,13,0,288,289,5,57,0,0,289,291,3,106,53,
        0,290,288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,286,1,0,0,
        0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,305,1,0,0,
        0,296,294,1,0,0,0,297,303,5,53,0,0,298,299,5,56,0,0,299,301,3,26,
        13,0,300,302,5,53,0,0,301,300,1,0,0,0,301,302,1,0,0,0,302,304,1,
        0,0,0,303,298,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,0,305,297,1,
        0,0,0,305,306,1,0,0,0,306,313,1,0,0,0,307,308,5,56,0,0,308,310,3,
        26,13,0,309,311,5,53,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,313,
        1,0,0,0,312,256,1,0,0,0,312,282,1,0,0,0,312,307,1,0,0,0,313,21,1,
        0,0,0,314,317,3,26,13,0,315,316,5,57,0,0,316,318,3,106,53,0,317,
        315,1,0,0,0,317,318,1,0,0,0,318,327,1,0,0,0,319,320,5,53,0,0,320,
        323,3,26,13,0,321,322,5,57,0,0,322,324,3,106,53,0,323,321,1,0,0,
        0,323,324,1,0,0,0,324,326,1,0,0,0,325,319,1,0,0,0,326,329,1,0,0,
        0,327,325,1,0,0,0,327,328,1,0,0,0,328,23,1,0,0,0,329,327,1,0,0,0,
        330,331,5,53,0,0,331,334,3,26,13,0,332,333,5,57,0,0,333,335,3,106,
        53,0,334,332,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,330,1,0,
        0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,25,1,0,0,
        0,340,338,1,0,0,0,341,344,5,39,0,0,342,343,5,54,0,0,343,345,3,106,
        53,0,344,342,1,0,0,0,344,345,1,0,0,0,345,27,1,0,0,0,346,349,3,30,
        15,0,347,348,5,57,0,0,348,350,3,106,53,0,349,347,1,0,0,0,349,350,
        1,0,0,0,350,359,1,0,0,0,351,352,5,53,0,0,352,355,3,30,15,0,353,354,
        5,57,0,0,354,356,3,106,53,0,355,353,1,0,0,0,355,356,1,0,0,0,356,
        358,1,0,0,0,357,351,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,
        360,1,0,0,0,360,395,1,0,0,0,361,359,1,0,0,0,362,393,5,53,0,0,363,
        365,5,50,0,0,364,366,3,30,15,0,365,364,1,0,0,0,365,366,1,0,0,0,366,
        375,1,0,0,0,367,368,5,53,0,0,368,371,3,30,15,0,369,370,5,57,0,0,
        370,372,3,106,53,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,
        0,373,367,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,
        0,376,386,1,0,0,0,377,375,1,0,0,0,378,384,5,53,0,0,379,380,5,56,
        0,0,380,382,3,30,15,0,381,383,5,53,0,0,382,381,1,0,0,0,382,383,1,
        0,0,0,383,385,1,0,0,0,384,379,1,0,0,0,384,385,1,0,0,0,385,387,1,
        0,0,0,386,378,1,0,0,0,386,387,1,0,0,0,387,394,1,0,0,0,388,389,5,
        56,0,0,389,391,3,30,15,0,390,392,5,53,0,0,391,390,1,0,0,0,391,392,
        1,0,0,0,392,394,1,0,0,0,393,363,1,0,0,0,393,388,1,0,0,0,393,394,
        1,0,0,0,394,396,1,0,0,0,395,362,1,0,0,0,395,396,1,0,0,0,396,428,
        1,0,0,0,397,399,5,50,0,0,398,400,3,30,15,0,399,398,1,0,0,0,399,400,
        1,0,0,0,400,409,1,0,0,0,401,402,5,53,0,0,402,405,3,30,15,0,403,404,
        5,57,0,0,404,406,3,106,53,0,405,403,1,0,0,0,405,406,1,0,0,0,406,
        408,1,0,0,0,407,401,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,
        410,1,0,0,0,410,420,1,0,0,0,411,409,1,0,0,0,412,418,5,53,0,0,413,
        414,5,56,0,0,414,416,3,30,15,0,415,417,5,53,0,0,416,415,1,0,0,0,
        416,417,1,0,0,0,417,419,1,0,0,0,418,413,1,0,0,0,418,419,1,0,0,0,
        419,421,1,0,0,0,420,412,1,0,0,0,420,421,1,0,0,0,421,428,1,0,0,0,
        422,423,5,56,0,0,423,425,3,30,15,0,424,426,5,53,0,0,425,424,1,0,
        0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,346,1,0,0,0,427,397,1,0,
        0,0,427,422,1,0,0,0,428,29,1,0,0,0,429,430,5,39,0,0,430,31,1,0,0,
        0,431,434,3,34,17,0,432,434,3,86,43,0,433,431,1,0,0,0,433,432,1,
        0,0,0,434,33,1,0,0,0,435,440,3,36,18,0,436,437,5,55,0,0,437,439,
        3,36,18,0,438,436,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,
        1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,443,445,5,55,0,0,444,443,
        1,0,0,0,444,445,1,0,0,0,445,446,1,0,0,0,446,447,5,38,0,0,447,35,
        1,0,0,0,448,457,3,38,19,0,449,457,3,48,24,0,450,457,3,50,25,0,451,
        457,3,52,26,0,452,457,3,64,32,0,453,457,3,80,40,0,454,457,3,82,41,
        0,455,457,3,84,42,0,456,448,1,0,0,0,456,449,1,0,0,0,456,450,1,0,
        0,0,456,451,1,0,0,0,456,452,1,0,0,0,456,453,1,0,0,0,456,454,1,0,
        0,0,456,455,1,0,0,0,457,37,1,0,0,0,458,465,3,42,21,0,459,466,3,40,
        20,0,460,463,3,46,23,0,461,464,3,182,91,0,462,464,3,162,81,0,463,
        461,1,0,0,0,463,462,1,0,0,0,464,466,1,0,0,0,465,459,1,0,0,0,465,
        460,1,0,0,0,466,479,1,0,0,0,467,475,3,42,21,0,468,471,5,57,0,0,469,
        472,3,182,91,0,470,472,3,42,21,0,471,469,1,0,0,0,471,470,1,0,0,0,
        472,474,1,0,0,0,473,468,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,
        475,476,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,478,458,1,0,0,0,
        478,467,1,0,0,0,479,39,1,0,0,0,480,481,5,54,0,0,481,484,3,106,53,
        0,482,483,5,57,0,0,483,485,3,106,53,0,484,482,1,0,0,0,484,485,1,
        0,0,0,485,41,1,0,0,0,486,491,3,44,22,0,487,488,5,53,0,0,488,490,
        3,44,22,0,489,487,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,
        1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,494,496,5,53,0,0,495,494,
        1,0,0,0,495,496,1,0,0,0,496,43,1,0,0,0,497,500,3,106,53,0,498,500,
        3,124,62,0,499,497,1,0,0,0,499,498,1,0,0,0,500,45,1,0,0,0,501,502,
        7,0,0,0,502,47,1,0,0,0,503,504,5,32,0,0,504,505,3,158,79,0,505,49,
        1,0,0,0,506,507,5,33,0,0,507,51,1,0,0,0,508,514,3,54,27,0,509,514,
        3,56,28,0,510,514,3,58,29,0,511,514,3,62,31,0,512,514,3,60,30,0,
        513,508,1,0,0,0,513,509,1,0,0,0,513,510,1,0,0,0,513,511,1,0,0,0,
        513,512,1,0,0,0,514,53,1,0,0,0,515,516,5,35,0,0,516,55,1,0,0,0,517,
        518,5,34,0,0,518,57,1,0,0,0,519,521,5,4,0,0,520,522,3,162,81,0,521,
        520,1,0,0,0,521,522,1,0,0,0,522,59,1,0,0,0,523,524,3,182,91,0,524,
        61,1,0,0,0,525,531,5,5,0,0,526,529,3,106,53,0,527,528,5,6,0,0,528,
        530,3,106,53,0,529,527,1,0,0,0,529,530,1,0,0,0,530,532,1,0,0,0,531,
        526,1,0,0,0,531,532,1,0,0,0,532,63,1,0,0,0,533,536,3,66,33,0,534,
        536,3,68,34,0,535,533,1,0,0,0,535,534,1,0,0,0,536,65,1,0,0,0,537,
        538,5,7,0,0,538,539,3,76,38,0,539,67,1,0,0,0,540,553,5,6,0,0,541,
        543,7,1,0,0,542,541,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,
        545,1,0,0,0,545,547,1,0,0,0,546,544,1,0,0,0,547,554,3,78,39,0,548,
        550,7,1,0,0,549,548,1,0,0,0,550,551,1,0,0,0,551,549,1,0,0,0,551,
        552,1,0,0,0,552,554,1,0,0,0,553,544,1,0,0,0,553,549,1,0,0,0,554,
        555,1,0,0,0,555,562,5,7,0,0,556,563,5,50,0,0,557,558,5,51,0,0,558,
        559,3,74,37,0,559,560,5,52,0,0,560,563,1,0,0,0,561,563,3,74,37,0,
        562,556,1,0,0,0,562,557,1,0,0,0,562,561,1,0,0,0,563,69,1,0,0,0,564,
        567,5,39,0,0,565,566,5,8,0,0,566,568,5,39,0,0,567,565,1,0,0,0,567,
        568,1,0,0,0,568,71,1,0,0,0,569,572,3,78,39,0,570,571,5,8,0,0,571,
        573,5,39,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,73,1,0,0,0,574,
        579,3,70,35,0,575,576,5,53,0,0,576,578,3,70,35,0,577,575,1,0,0,0,
        578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,583,1,0,0,0,
        581,579,1,0,0,0,582,584,5,53,0,0,583,582,1,0,0,0,583,584,1,0,0,0,
        584,75,1,0,0,0,585,590,3,72,36,0,586,587,5,53,0,0,587,589,3,72,36,
        0,588,586,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,
        0,591,77,1,0,0,0,592,590,1,0,0,0,593,598,5,39,0,0,594,595,5,48,0,
        0,595,597,5,39,0,0,596,594,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,
        0,598,599,1,0,0,0,599,79,1,0,0,0,600,598,1,0,0,0,601,602,5,9,0,0,
        602,607,5,39,0,0,603,604,5,53,0,0,604,606,5,39,0,0,605,603,1,0,0,
        0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,81,1,0,0,0,
        609,607,1,0,0,0,610,611,5,10,0,0,611,616,5,39,0,0,612,613,5,53,0,
        0,613,615,5,39,0,0,614,612,1,0,0,0,615,618,1,0,0,0,616,614,1,0,0,
        0,616,617,1,0,0,0,617,83,1,0,0,0,618,616,1,0,0,0,619,620,5,11,0,
        0,620,623,3,106,53,0,621,622,5,53,0,0,622,624,3,106,53,0,623,621,
        1,0,0,0,623,624,1,0,0,0,624,85,1,0,0,0,625,635,3,90,45,0,626,635,
        3,92,46,0,627,635,3,94,47,0,628,635,3,96,48,0,629,635,3,98,49,0,
        630,635,3,16,8,0,631,635,3,168,84,0,632,635,3,10,5,0,633,635,3,88,
        44,0,634,625,1,0,0,0,634,626,1,0,0,0,634,627,1,0,0,0,634,628,1,0,
        0,0,634,629,1,0,0,0,634,630,1,0,0,0,634,631,1,0,0,0,634,632,1,0,
        0,0,634,633,1,0,0,0,635,87,1,0,0,0,636,640,5,36,0,0,637,641,3,16,
        8,0,638,641,3,98,49,0,639,641,3,94,47,0,640,637,1,0,0,0,640,638,
        1,0,0,0,640,639,1,0,0,0,641,89,1,0,0,0,642,643,5,12,0,0,643,644,
        3,106,53,0,644,645,5,54,0,0,645,653,3,104,52,0,646,647,5,13,0,0,
        647,648,3,106,53,0,648,649,5,54,0,0,649,650,3,104,52,0,650,652,1,
        0,0,0,651,646,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,653,654,1,
        0,0,0,654,659,1,0,0,0,655,653,1,0,0,0,656,657,5,14,0,0,657,658,5,
        54,0,0,658,660,3,104,52,0,659,656,1,0,0,0,659,660,1,0,0,0,660,91,
        1,0,0,0,661,662,5,15,0,0,662,663,3,106,53,0,663,664,5,54,0,0,664,
        668,3,104,52,0,665,666,5,14,0,0,666,667,5,54,0,0,667,669,3,104,52,
        0,668,665,1,0,0,0,668,669,1,0,0,0,669,93,1,0,0,0,670,671,5,16,0,
        0,671,672,3,158,79,0,672,673,5,17,0,0,673,674,3,162,81,0,674,675,
        5,54,0,0,675,679,3,104,52,0,676,677,5,14,0,0,677,678,5,54,0,0,678,
        680,3,104,52,0,679,676,1,0,0,0,679,680,1,0,0,0,680,95,1,0,0,0,681,
        682,5,18,0,0,682,683,5,54,0,0,683,705,3,104,52,0,684,685,3,102,51,
        0,685,686,5,54,0,0,686,687,3,104,52,0,687,689,1,0,0,0,688,684,1,
        0,0,0,689,690,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,695,1,
        0,0,0,692,693,5,14,0,0,693,694,5,54,0,0,694,696,3,104,52,0,695,692,
        1,0,0,0,695,696,1,0,0,0,696,700,1,0,0,0,697,698,5,19,0,0,698,699,
        5,54,0,0,699,701,3,104,52,0,700,697,1,0,0,0,700,701,1,0,0,0,701,
        706,1,0,0,0,702,703,5,19,0,0,703,704,5,54,0,0,704,706,3,104,52,0,
        705,688,1,0,0,0,705,702,1,0,0,0,706,97,1,0,0,0,707,708,5,20,0,0,
        708,713,3,100,50,0,709,710,5,53,0,0,710,712,3,100,50,0,711,709,1,
        0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,716,1,
        0,0,0,715,713,1,0,0,0,716,717,5,54,0,0,717,718,3,104,52,0,718,99,
        1,0,0,0,719,722,3,106,53,0,720,721,5,8,0,0,721,723,3,126,63,0,722,
        720,1,0,0,0,722,723,1,0,0,0,723,101,1,0,0,0,724,730,5,21,0,0,725,
        728,3,106,53,0,726,727,5,8,0,0,727,729,5,39,0,0,728,726,1,0,0,0,
        728,729,1,0,0,0,729,731,1,0,0,0,730,725,1,0,0,0,730,731,1,0,0,0,
        731,103,1,0,0,0,732,743,3,34,17,0,733,734,5,38,0,0,734,736,5,97,
        0,0,735,737,3,32,16,0,736,735,1,0,0,0,737,738,1,0,0,0,738,736,1,
        0,0,0,738,739,1,0,0,0,739,740,1,0,0,0,740,741,5,98,0,0,741,743,1,
        0,0,0,742,732,1,0,0,0,742,733,1,0,0,0,743,105,1,0,0,0,744,750,3,
        114,57,0,745,746,5,12,0,0,746,747,3,114,57,0,747,748,5,14,0,0,748,
        749,3,106,53,0,749,751,1,0,0,0,750,745,1,0,0,0,750,751,1,0,0,0,751,
        754,1,0,0,0,752,754,3,110,55,0,753,744,1,0,0,0,753,752,1,0,0,0,754,
        107,1,0,0,0,755,758,3,114,57,0,756,758,3,112,56,0,757,755,1,0,0,
        0,757,756,1,0,0,0,758,109,1,0,0,0,759,761,5,22,0,0,760,762,3,28,
        14,0,761,760,1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,764,5,54,
        0,0,764,765,3,106,53,0,765,111,1,0,0,0,766,768,5,22,0,0,767,769,
        3,28,14,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,
        5,54,0,0,771,772,3,108,54,0,772,113,1,0,0,0,773,778,3,116,58,0,774,
        775,5,23,0,0,775,777,3,116,58,0,776,774,1,0,0,0,777,780,1,0,0,0,
        778,776,1,0,0,0,778,779,1,0,0,0,779,115,1,0,0,0,780,778,1,0,0,0,
        781,786,3,118,59,0,782,783,5,24,0,0,783,785,3,118,59,0,784,782,1,
        0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,117,1,
        0,0,0,788,786,1,0,0,0,789,790,5,25,0,0,790,793,3,118,59,0,791,793,
        3,120,60,0,792,789,1,0,0,0,792,791,1,0,0,0,793,119,1,0,0,0,794,800,
        3,126,63,0,795,796,3,122,61,0,796,797,3,126,63,0,797,799,1,0,0,0,
        798,795,1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,
        801,121,1,0,0,0,802,800,1,0,0,0,803,817,5,73,0,0,804,817,5,74,0,
        0,805,817,5,75,0,0,806,817,5,76,0,0,807,817,5,77,0,0,808,817,5,78,
        0,0,809,817,5,79,0,0,810,817,5,17,0,0,811,812,5,25,0,0,812,817,5,
        17,0,0,813,817,5,26,0,0,814,815,5,26,0,0,815,817,5,25,0,0,816,803,
        1,0,0,0,816,804,1,0,0,0,816,805,1,0,0,0,816,806,1,0,0,0,816,807,
        1,0,0,0,816,808,1,0,0,0,816,809,1,0,0,0,816,810,1,0,0,0,816,811,
        1,0,0,0,816,813,1,0,0,0,816,814,1,0,0,0,817,123,1,0,0,0,818,819,
        5,50,0,0,819,820,3,126,63,0,820,125,1,0,0,0,821,826,3,128,64,0,822,
        823,5,60,0,0,823,825,3,128,64,0,824,822,1,0,0,0,825,828,1,0,0,0,
        826,824,1,0,0,0,826,827,1,0,0,0,827,127,1,0,0,0,828,826,1,0,0,0,
        829,834,3,130,65,0,830,831,5,61,0,0,831,833,3,130,65,0,832,830,1,
        0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,129,1,
        0,0,0,836,834,1,0,0,0,837,842,3,132,66,0,838,839,5,62,0,0,839,841,
        3,132,66,0,840,838,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,
        1,0,0,0,843,131,1,0,0,0,844,842,1,0,0,0,845,850,3,134,67,0,846,847,
        7,2,0,0,847,849,3,134,67,0,848,846,1,0,0,0,849,852,1,0,0,0,850,848,
        1,0,0,0,850,851,1,0,0,0,851,133,1,0,0,0,852,850,1,0,0,0,853,858,
        3,136,68,0,854,855,7,3,0,0,855,857,3,136,68,0,856,854,1,0,0,0,857,
        860,1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,135,1,0,0,0,860,
        858,1,0,0,0,861,866,3,138,69,0,862,863,7,4,0,0,863,865,3,138,69,
        0,864,862,1,0,0,0,865,868,1,0,0,0,866,864,1,0,0,0,866,867,1,0,0,
        0,867,137,1,0,0,0,868,866,1,0,0,0,869,870,7,5,0,0,870,873,3,138,
        69,0,871,873,3,140,70,0,872,869,1,0,0,0,872,871,1,0,0,0,873,139,
        1,0,0,0,874,877,3,142,71,0,875,876,5,56,0,0,876,878,3,138,69,0,877,
        875,1,0,0,0,877,878,1,0,0,0,878,141,1,0,0,0,879,881,5,37,0,0,880,
        879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,886,3,144,72,0,883,
        885,3,152,76,0,884,883,1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,
        887,1,0,0,0,887,143,1,0,0,0,888,886,1,0,0,0,889,892,5,51,0,0,890,
        893,3,182,91,0,891,893,3,146,73,0,892,890,1,0,0,0,892,891,1,0,0,
        0,892,893,1,0,0,0,893,894,1,0,0,0,894,917,5,52,0,0,895,897,5,58,
        0,0,896,898,3,146,73,0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,
        0,0,0,899,917,5,59,0,0,900,902,5,71,0,0,901,903,3,164,82,0,902,901,
        1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,917,5,72,0,0,905,917,
        5,39,0,0,906,917,3,186,93,0,907,909,5,1,0,0,908,907,1,0,0,0,909,
        910,1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,917,1,0,0,0,912,
        917,5,49,0,0,913,917,5,27,0,0,914,917,5,28,0,0,915,917,5,29,0,0,
        916,889,1,0,0,0,916,895,1,0,0,0,916,900,1,0,0,0,916,905,1,0,0,0,
        916,906,1,0,0,0,916,908,1,0,0,0,916,912,1,0,0,0,916,913,1,0,0,0,
        916,914,1,0,0,0,916,915,1,0,0,0,917,145,1,0,0,0,918,921,3,148,74,
        0,919,921,3,150,75,0,920,918,1,0,0,0,920,919,1,0,0,0,921,147,1,0,
        0,0,922,923,3,44,22,0,923,924,3,176,88,0,924,149,1,0,0,0,925,930,
        3,44,22,0,926,927,5,53,0,0,927,929,3,44,22,0,928,926,1,0,0,0,929,
        932,1,0,0,0,930,928,1,0,0,0,930,931,1,0,0,0,931,934,1,0,0,0,932,
        930,1,0,0,0,933,935,5,53,0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,
        151,1,0,0,0,936,938,5,51,0,0,937,939,3,170,85,0,938,937,1,0,0,0,
        938,939,1,0,0,0,939,940,1,0,0,0,940,948,5,52,0,0,941,942,5,58,0,
        0,942,943,3,154,77,0,943,944,5,59,0,0,944,948,1,0,0,0,945,946,5,
        48,0,0,946,948,5,39,0,0,947,936,1,0,0,0,947,941,1,0,0,0,947,945,
        1,0,0,0,948,153,1,0,0,0,949,954,3,156,78,0,950,951,5,53,0,0,951,
        953,3,156,78,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,954,
        955,1,0,0,0,955,958,1,0,0,0,956,954,1,0,0,0,957,959,5,53,0,0,958,
        957,1,0,0,0,958,959,1,0,0,0,959,155,1,0,0,0,960,975,3,106,53,0,961,
        963,3,106,53,0,962,961,1,0,0,0,962,963,1,0,0,0,963,964,1,0,0,0,964,
        966,5,54,0,0,965,967,3,106,53,0,966,965,1,0,0,0,966,967,1,0,0,0,
        967,972,1,0,0,0,968,970,5,54,0,0,969,971,3,106,53,0,970,969,1,0,
        0,0,970,971,1,0,0,0,971,973,1,0,0,0,972,968,1,0,0,0,972,973,1,0,
        0,0,973,975,1,0,0,0,974,960,1,0,0,0,974,962,1,0,0,0,975,157,1,0,
        0,0,976,981,3,160,80,0,977,978,5,53,0,0,978,980,3,160,80,0,979,977,
        1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,985,
        1,0,0,0,983,981,1,0,0,0,984,986,5,53,0,0,985,984,1,0,0,0,985,986,
        1,0,0,0,986,159,1,0,0,0,987,990,3,126,63,0,988,990,3,124,62,0,989,
        987,1,0,0,0,989,988,1,0,0,0,990,161,1,0,0,0,991,996,3,106,53,0,992,
        993,5,53,0,0,993,995,3,106,53,0,994,992,1,0,0,0,995,998,1,0,0,0,
        996,994,1,0,0,0,996,997,1,0,0,0,997,1000,1,0,0,0,998,996,1,0,0,0,
        999,1001,5,53,0,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,163,1,
        0,0,0,1002,1014,3,166,83,0,1003,1015,3,176,88,0,1004,1005,5,53,0,
        0,1005,1007,3,166,83,0,1006,1004,1,0,0,0,1007,1010,1,0,0,0,1008,
        1006,1,0,0,0,1008,1009,1,0,0,0,1009,1012,1,0,0,0,1010,1008,1,0,0,
        0,1011,1013,5,53,0,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1015,
        1,0,0,0,1014,1003,1,0,0,0,1014,1008,1,0,0,0,1015,1031,1,0,0,0,1016,
        1028,3,44,22,0,1017,1029,3,176,88,0,1018,1019,5,53,0,0,1019,1021,
        3,44,22,0,1020,1018,1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,
        1022,1023,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,1025,1027,
        5,53,0,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,1029,1,0,0,0,1028,
        1017,1,0,0,0,1028,1022,1,0,0,0,1029,1031,1,0,0,0,1030,1002,1,0,0,
        0,1030,1016,1,0,0,0,1031,165,1,0,0,0,1032,1033,3,106,53,0,1033,1034,
        5,54,0,0,1034,1035,3,106,53,0,1035,1039,1,0,0,0,1036,1037,5,56,0,
        0,1037,1039,3,126,63,0,1038,1032,1,0,0,0,1038,1036,1,0,0,0,1039,
        167,1,0,0,0,1040,1041,5,30,0,0,1041,1047,5,39,0,0,1042,1044,5,51,
        0,0,1043,1045,3,170,85,0,1044,1043,1,0,0,0,1044,1045,1,0,0,0,1045,
        1046,1,0,0,0,1046,1048,5,52,0,0,1047,1042,1,0,0,0,1047,1048,1,0,
        0,0,1048,1049,1,0,0,0,1049,1050,5,54,0,0,1050,1051,3,104,52,0,1051,
        169,1,0,0,0,1052,1057,3,172,86,0,1053,1054,5,53,0,0,1054,1056,3,
        172,86,0,1055,1053,1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1057,
        1058,1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,0,0,0,1060,1062,5,53,
        0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,171,1,0,0,0,1063,1065,
        3,106,53,0,1064,1066,3,176,88,0,1065,1064,1,0,0,0,1065,1066,1,0,
        0,0,1066,1076,1,0,0,0,1067,1068,3,106,53,0,1068,1069,5,57,0,0,1069,
        1070,3,106,53,0,1070,1076,1,0,0,0,1071,1072,5,56,0,0,1072,1076,3,
        106,53,0,1073,1074,5,50,0,0,1074,1076,3,106,53,0,1075,1063,1,0,0,
        0,1075,1067,1,0,0,0,1075,1071,1,0,0,0,1075,1073,1,0,0,0,1076,173,
        1,0,0,0,1077,1080,3,176,88,0,1078,1080,3,178,89,0,1079,1077,1,0,
        0,0,1079,1078,1,0,0,0,1080,175,1,0,0,0,1081,1083,5,36,0,0,1082,1081,
        1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1085,5,16,0,0,1085,
        1086,3,158,79,0,1086,1087,5,17,0,0,1087,1089,3,114,57,0,1088,1090,
        3,174,87,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,177,1,0,0,0,
        1091,1092,5,12,0,0,1092,1094,3,108,54,0,1093,1095,3,174,87,0,1094,
        1093,1,0,0,0,1094,1095,1,0,0,0,1095,179,1,0,0,0,1096,1097,5,39,0,
        0,1097,181,1,0,0,0,1098,1100,5,31,0,0,1099,1101,3,184,92,0,1100,
        1099,1,0,0,0,1100,1101,1,0,0,0,1101,183,1,0,0,0,1102,1103,5,6,0,
        0,1103,1106,3,106,53,0,1104,1106,3,162,81,0,1105,1102,1,0,0,0,1105,
        1104,1,0,0,0,1106,185,1,0,0,0,1107,1108,7,6,0,0,1108,187,1,0,0,0,
        160,193,197,199,208,217,220,227,235,245,252,260,267,269,271,276,
        278,280,284,290,294,301,303,305,310,312,317,323,327,334,338,344,
        349,355,359,365,371,375,382,384,386,391,393,395,399,405,409,416,
        418,420,425,427,433,440,444,456,463,465,471,475,478,484,491,495,
        499,513,521,529,531,535,544,551,553,562,567,572,579,583,590,598,
        607,616,623,634,640,653,659,668,679,690,695,700,705,713,722,728,
        730,738,742,750,753,757,761,768,778,786,792,800,816,826,834,842,
        850,858,866,872,877,880,886,892,897,902,910,916,920,930,934,938,
        947,954,958,962,966,970,972,974,981,985,989,996,1000,1008,1012,1014,
        1022,1026,1028,1030,1038,1044,1047,1057,1061,1065,1075,1079,1082,
        1089,1094,1100,1105
    ]

class Python3Parser ( Parser ):

    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'def'", "'return'", 
                     "'raise'", "'from'", "'import'", "'as'", "'global'", 
                     "'nonlocal'", "'assert'", "'if'", "'elif'", "'else'", 
                     "'while'", "'for'", "'in'", "'try'", "'finally'", "'with'", 
                     "'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", 
                     "'None'", "'True'", "'False'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'.'", "'...'", "'*'", "'('", 
                     "')'", "','", "':'", "';'", "'**'", "'='", "'['", "']'", 
                     "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", 
                     "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", 
                     "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", 
                     "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "STRING", "INTEGER", "DEF", "RETURN", 
                      "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", 
                      "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", 
                      "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", 
                      "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", 
                      "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", 
                      "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
                      "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                      "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", 
                      "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", 
                      "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
                      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                      "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", 
                      "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", 
                      "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", 
                      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", 
                      "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", 
                      "INDENT", "DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_decorated_subject = 6
    RULE_async_funcdef = 7
    RULE_funcdef = 8
    RULE_parameters = 9
    RULE_typedargslist = 10
    RULE_posargslist = 11
    RULE_kwargslist = 12
    RULE_tfpdef = 13
    RULE_varargslist = 14
    RULE_vfpdef = 15
    RULE_stmt = 16
    RULE_simple_stmt = 17
    RULE_small_stmt = 18
    RULE_expr_stmt = 19
    RULE_annassign = 20
    RULE_testlist_star_expr = 21
    RULE_test_star_expr = 22
    RULE_augassign = 23
    RULE_del_stmt = 24
    RULE_pass_stmt = 25
    RULE_flow_stmt = 26
    RULE_break_stmt = 27
    RULE_continue_stmt = 28
    RULE_return_stmt = 29
    RULE_yield_stmt = 30
    RULE_raise_stmt = 31
    RULE_import_stmt = 32
    RULE_import_name = 33
    RULE_import_from = 34
    RULE_import_as_name = 35
    RULE_dotted_as_name = 36
    RULE_import_as_names = 37
    RULE_dotted_as_names = 38
    RULE_dotted_name = 39
    RULE_global_stmt = 40
    RULE_nonlocal_stmt = 41
    RULE_assert_stmt = 42
    RULE_compound_stmt = 43
    RULE_async_stmt = 44
    RULE_if_stmt = 45
    RULE_while_stmt = 46
    RULE_for_stmt = 47
    RULE_try_stmt = 48
    RULE_with_stmt = 49
    RULE_with_item = 50
    RULE_except_clause = 51
    RULE_suite = 52
    RULE_test = 53
    RULE_test_nocond = 54
    RULE_lambdef = 55
    RULE_lambdef_nocond = 56
    RULE_or_test = 57
    RULE_and_test = 58
    RULE_not_test = 59
    RULE_comparison = 60
    RULE_comp_op = 61
    RULE_star_expr = 62
    RULE_expr = 63
    RULE_xor_expr = 64
    RULE_and_expr = 65
    RULE_shift_expr = 66
    RULE_arith_expr = 67
    RULE_term = 68
    RULE_factor = 69
    RULE_power = 70
    RULE_atom_expr = 71
    RULE_atom = 72
    RULE_testlist_comp = 73
    RULE_testlist_comp1 = 74
    RULE_testlist_comp2 = 75
    RULE_trailer = 76
    RULE_subscriptlist = 77
    RULE_subscript = 78
    RULE_exprlist = 79
    RULE_expr_or_star = 80
    RULE_testlist = 81
    RULE_dictorsetmaker = 82
    RULE_dict_compr_component = 83
    RULE_classdef = 84
    RULE_arglist = 85
    RULE_argument = 86
    RULE_comp_iter = 87
    RULE_comp_for = 88
    RULE_comp_if = 89
    RULE_encoding_decl = 90
    RULE_yield_expr = 91
    RULE_yield_arg = 92
    RULE_number = 93

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "decorated_subject", "async_funcdef", 
                   "funcdef", "parameters", "typedargslist", "posargslist", 
                   "kwargslist", "tfpdef", "varargslist", "vfpdef", "stmt", 
                   "simple_stmt", "small_stmt", "expr_stmt", "annassign", 
                   "testlist_star_expr", "test_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "suite", "test", 
                   "test_nocond", "lambdef", "lambdef_nocond", "or_test", 
                   "and_test", "not_test", "comparison", "comp_op", "star_expr", 
                   "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", 
                   "term", "factor", "power", "atom_expr", "atom", "testlist_comp", 
                   "testlist_comp1", "testlist_comp2", "trailer", "subscriptlist", 
                   "subscript", "exprlist", "expr_or_star", "testlist", 
                   "dictorsetmaker", "dict_compr_component", "classdef", 
                   "arglist", "argument", "comp_iter", "comp_for", "comp_if", 
                   "encoding_decl", "yield_expr", "yield_arg", "number" ]

    EOF = Token.EOF
    STRING=1
    INTEGER=2
    DEF=3
    RETURN=4
    RAISE=5
    FROM=6
    IMPORT=7
    AS=8
    GLOBAL=9
    NONLOCAL=10
    ASSERT=11
    IF=12
    ELIF=13
    ELSE=14
    WHILE=15
    FOR=16
    IN=17
    TRY=18
    FINALLY=19
    WITH=20
    EXCEPT=21
    LAMBDA=22
    OR=23
    AND=24
    NOT=25
    IS=26
    NONE=27
    TRUE=28
    FALSE=29
    CLASS=30
    YIELD=31
    DEL=32
    PASS=33
    CONTINUE=34
    BREAK=35
    ASYNC=36
    AWAIT=37
    NEWLINE=38
    NAME=39
    STRING_LITERAL=40
    BYTES_LITERAL=41
    DECIMAL_INTEGER=42
    OCT_INTEGER=43
    HEX_INTEGER=44
    BIN_INTEGER=45
    FLOAT_NUMBER=46
    IMAG_NUMBER=47
    DOT=48
    ELLIPSIS=49
    STAR=50
    OPEN_PAREN=51
    CLOSE_PAREN=52
    COMMA=53
    COLON=54
    SEMI_COLON=55
    POWER=56
    ASSIGN=57
    OPEN_BRACK=58
    CLOSE_BRACK=59
    OR_OP=60
    XOR=61
    AND_OP=62
    LEFT_SHIFT=63
    RIGHT_SHIFT=64
    ADD=65
    MINUS=66
    DIV=67
    MOD=68
    IDIV=69
    NOT_OP=70
    OPEN_BRACE=71
    CLOSE_BRACE=72
    LESS_THAN=73
    GREATER_THAN=74
    EQUALS=75
    GT_EQ=76
    LT_EQ=77
    NOT_EQ_1=78
    NOT_EQ_2=79
    AT=80
    ARROW=81
    ADD_ASSIGN=82
    SUB_ASSIGN=83
    MULT_ASSIGN=84
    AT_ASSIGN=85
    DIV_ASSIGN=86
    MOD_ASSIGN=87
    AND_ASSIGN=88
    OR_ASSIGN=89
    XOR_ASSIGN=90
    LEFT_SHIFT_ASSIGN=91
    RIGHT_SHIFT_ASSIGN=92
    POWER_ASSIGN=93
    IDIV_ASSIGN=94
    SKIP_=95
    UNKNOWN_CHAR=96
    INDENT=97
    DEDENT=98

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 193
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 188
                self.match(Python3Parser.NEWLINE)
                pass
            elif token in [1, 2, 4, 5, 6, 7, 9, 10, 11, 22, 25, 27, 28, 29, 31, 32, 33, 34, 35, 37, 39, 46, 47, 49, 50, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 189
                self.simple_stmt()
                pass
            elif token in [3, 12, 15, 16, 18, 20, 30, 36, 80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 190
                self.compound_stmt()
                self.state = 191
                self.match(Python3Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 292383231474769662) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 32867) != 0):
                self.state = 197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 195
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 16, 18, 20, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 46, 47, 49, 50, 51, 58, 65, 66, 70, 71, 80]:
                    self.state = 196
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 202
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.testlist()
            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38:
                self.state = 205
                self.match(Python3Parser.NEWLINE)
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 211
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.match(Python3Parser.AT)
            self.state = 214
            self.dotted_name()
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 215
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 364440414268162054) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                    self.state = 216
                    self.arglist()


                self.state = 219
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 222
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 224
                self.decorator()
                self.state = 227 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==80):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def decorated_subject(self):
            return self.getTypedRuleContext(Python3Parser.Decorated_subjectContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.decorators()
            self.state = 230
            self.decorated_subject()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Decorated_subjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(Python3Parser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated_subject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated_subject" ):
                listener.enterDecorated_subject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated_subject" ):
                listener.exitDecorated_subject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated_subject" ):
                return visitor.visitDecorated_subject(self)
            else:
                return visitor.visitChildren(self)




    def decorated_subject(self):

        localctx = Python3Parser.Decorated_subjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_decorated_subject)
        try:
            self.state = 235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 232
                self.classdef()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 233
                self.funcdef()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 234
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_funcdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = Python3Parser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(Python3Parser.ASYNC)
            self.state = 238
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(Python3Parser.DEF)
            self.state = 241
            self.match(Python3Parser.NAME)
            self.state = 242
            self.parameters()
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 243
                self.match(Python3Parser.ARROW)
                self.state = 244
                self.test()


            self.state = 247
            self.match(Python3Parser.COLON)
            self.state = 248
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 73184043700584448) != 0):
                self.state = 251
                self.typedargslist()


            self.state = 254
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Parmlist_restContext(TypedargslistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.TypedargslistContext
            super().__init__(parser)
            self.rest = None # TfpdefContext
            self._tfpdef = None # TfpdefContext
            self.kw_only_args = list() # of TfpdefContexts
            self._test = None # TestContext
            self.kw_only_defaults = list() # of TestContexts
            self.kw = None # TfpdefContext
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)
        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)
        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParmlist_rest" ):
                listener.enterParmlist_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParmlist_rest" ):
                listener.exitParmlist_rest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParmlist_rest" ):
                return visitor.visitParmlist_rest(self)
            else:
                return visitor.visitChildren(self)


    class Parmlist_kwContext(TypedargslistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.TypedargslistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)
        def tfpdef(self):
            return self.getTypedRuleContext(Python3Parser.TfpdefContext,0)

        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParmlist_kw" ):
                listener.enterParmlist_kw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParmlist_kw" ):
                listener.exitParmlist_kw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParmlist_kw" ):
                return visitor.visitParmlist_kw(self)
            else:
                return visitor.visitChildren(self)


    class Parmlist_nonemptyContext(TypedargslistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.TypedargslistContext
            super().__init__(parser)
            self.rest = None # TfpdefContext
            self.kw = None # TfpdefContext
            self.copyFrom(ctx)

        def posargslist(self):
            return self.getTypedRuleContext(Python3Parser.PosargslistContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)
        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)
        def kwargslist(self):
            return self.getTypedRuleContext(Python3Parser.KwargslistContext,0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)
        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParmlist_nonempty" ):
                listener.enterParmlist_nonempty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParmlist_nonempty" ):
                listener.exitParmlist_nonempty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParmlist_nonempty" ):
                return visitor.visitParmlist_nonempty(self)
            else:
                return visitor.visitChildren(self)



    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                localctx = Python3Parser.Parmlist_nonemptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.posargslist()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 257
                    self.match(Python3Parser.COMMA)
                    self.state = 278
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [50]:
                        self.state = 258
                        self.match(Python3Parser.STAR)
                        self.state = 260
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==39:
                            self.state = 259
                            localctx.rest = self.tfpdef()


                        self.state = 262
                        self.kwargslist()
                        self.state = 271
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 263
                            self.match(Python3Parser.COMMA)
                            self.state = 269
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==56:
                                self.state = 264
                                self.match(Python3Parser.POWER)
                                self.state = 265
                                localctx.kw = self.tfpdef()
                                self.state = 267
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==53:
                                    self.state = 266
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [56]:
                        self.state = 273
                        self.match(Python3Parser.POWER)
                        self.state = 274
                        localctx.kw = self.tfpdef()
                        self.state = 276
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 275
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [52]:
                        pass
                    else:
                        pass


                pass
            elif token in [50]:
                localctx = Python3Parser.Parmlist_restContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 282
                self.match(Python3Parser.STAR)
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39:
                    self.state = 283
                    localctx.rest = self.tfpdef()


                self.state = 294
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 286
                        self.match(Python3Parser.COMMA)
                        self.state = 287
                        localctx._tfpdef = self.tfpdef()
                        localctx.kw_only_args.append(localctx._tfpdef)
                        self.state = 290
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==57:
                            self.state = 288
                            self.match(Python3Parser.ASSIGN)
                            self.state = 289
                            localctx._test = self.test()
                            localctx.kw_only_defaults.append(localctx._test)

                 
                    self.state = 296
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 297
                    self.match(Python3Parser.COMMA)
                    self.state = 303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==56:
                        self.state = 298
                        self.match(Python3Parser.POWER)
                        self.state = 299
                        localctx.kw = self.tfpdef()
                        self.state = 301
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 300
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [56]:
                localctx = Python3Parser.Parmlist_kwContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 307
                self.match(Python3Parser.POWER)
                self.state = 308
                self.tfpdef()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 309
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PosargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._tfpdef = None # TfpdefContext
            self.args = list() # of TfpdefContexts
            self._test = None # TestContext
            self.defaults = list() # of TestContexts

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_posargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosargslist" ):
                listener.enterPosargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosargslist" ):
                listener.exitPosargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosargslist" ):
                return visitor.visitPosargslist(self)
            else:
                return visitor.visitChildren(self)




    def posargslist(self):

        localctx = Python3Parser.PosargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_posargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            localctx._tfpdef = self.tfpdef()
            localctx.args.append(localctx._tfpdef)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 315
                self.match(Python3Parser.ASSIGN)
                self.state = 316
                localctx._test = self.test()
                localctx.defaults.append(localctx._test)


            self.state = 327
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 319
                    self.match(Python3Parser.COMMA)
                    self.state = 320
                    localctx._tfpdef = self.tfpdef()
                    localctx.args.append(localctx._tfpdef)
                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 321
                        self.match(Python3Parser.ASSIGN)
                        self.state = 322
                        localctx._test = self.test()
                        localctx.defaults.append(localctx._test)

             
                self.state = 329
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._tfpdef = None # TfpdefContext
            self.args = list() # of TfpdefContexts
            self._test = None # TestContext
            self.defaults = list() # of TestContexts

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_kwargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargslist" ):
                listener.enterKwargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargslist" ):
                listener.exitKwargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargslist" ):
                return visitor.visitKwargslist(self)
            else:
                return visitor.visitChildren(self)




    def kwargslist(self):

        localctx = Python3Parser.KwargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_kwargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 330
                    self.match(Python3Parser.COMMA)
                    self.state = 331
                    localctx._tfpdef = self.tfpdef()
                    localctx.args.append(localctx._tfpdef)
                    self.state = 334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 332
                        self.match(Python3Parser.ASSIGN)
                        self.state = 333
                        localctx._test = self.test()
                        localctx.defaults.append(localctx._test)

             
                self.state = 340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(Python3Parser.NAME)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 342
                self.match(Python3Parser.COLON)
                self.state = 343
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                self.state = 346
                self.vfpdef()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 347
                    self.match(Python3Parser.ASSIGN)
                    self.state = 348
                    self.test()


                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 351
                        self.match(Python3Parser.COMMA)
                        self.state = 352
                        self.vfpdef()
                        self.state = 355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==57:
                            self.state = 353
                            self.match(Python3Parser.ASSIGN)
                            self.state = 354
                            self.test()

                 
                    self.state = 361
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 362
                    self.match(Python3Parser.COMMA)
                    self.state = 393
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [50]:
                        self.state = 363
                        self.match(Python3Parser.STAR)
                        self.state = 365
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==39:
                            self.state = 364
                            self.vfpdef()


                        self.state = 375
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 367
                                self.match(Python3Parser.COMMA)
                                self.state = 368
                                self.vfpdef()
                                self.state = 371
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==57:
                                    self.state = 369
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 370
                                    self.test()

                         
                            self.state = 377
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                        self.state = 386
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 378
                            self.match(Python3Parser.COMMA)
                            self.state = 384
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==56:
                                self.state = 379
                                self.match(Python3Parser.POWER)
                                self.state = 380
                                self.vfpdef()
                                self.state = 382
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==53:
                                    self.state = 381
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [56]:
                        self.state = 388
                        self.match(Python3Parser.POWER)
                        self.state = 389
                        self.vfpdef()
                        self.state = 391
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 390
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [54]:
                        pass
                    else:
                        pass


                pass
            elif token in [50]:
                self.state = 397
                self.match(Python3Parser.STAR)
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39:
                    self.state = 398
                    self.vfpdef()


                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 401
                        self.match(Python3Parser.COMMA)
                        self.state = 402
                        self.vfpdef()
                        self.state = 405
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==57:
                            self.state = 403
                            self.match(Python3Parser.ASSIGN)
                            self.state = 404
                            self.test()

                 
                    self.state = 411
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 412
                    self.match(Python3Parser.COMMA)
                    self.state = 418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==56:
                        self.state = 413
                        self.match(Python3Parser.POWER)
                        self.state = 414
                        self.vfpdef()
                        self.state = 416
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 415
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [56]:
                self.state = 422
                self.match(Python3Parser.POWER)
                self.state = 423
                self.vfpdef()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 424
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_stmt)
        try:
            self.state = 433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 5, 6, 7, 9, 10, 11, 22, 25, 27, 28, 29, 31, 32, 33, 34, 35, 37, 39, 46, 47, 49, 50, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.simple_stmt()
                pass
            elif token in [3, 12, 15, 16, 18, 20, 30, 36, 80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.compound_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.small_stmt()
            self.state = 440
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 436
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 437
                    self.small_stmt() 
                self.state = 442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 443
                self.match(Python3Parser.SEMI_COLON)


            self.state = 446
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmall_stmt" ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmall_stmt" ):
                listener.exitSmall_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmall_stmt" ):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)




    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_small_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 22, 25, 27, 28, 29, 37, 39, 46, 47, 49, 50, 51, 58, 65, 66, 70, 71]:
                self.state = 448
                self.expr_stmt()
                pass
            elif token in [32]:
                self.state = 449
                self.del_stmt()
                pass
            elif token in [33]:
                self.state = 450
                self.pass_stmt()
                pass
            elif token in [4, 5, 31, 34, 35]:
                self.state = 451
                self.flow_stmt()
                pass
            elif token in [6, 7]:
                self.state = 452
                self.import_stmt()
                pass
            elif token in [9]:
                self.state = 453
                self.global_stmt()
                pass
            elif token in [10]:
                self.state = 454
                self.nonlocal_stmt()
                pass
            elif token in [11]:
                self.state = 455
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Reg_assignContext(Expr_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.Expr_stmtContext
            super().__init__(parser)
            self.lhs = None # Testlist_star_exprContext
            self.copyFrom(ctx)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)
        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReg_assign" ):
                listener.enterReg_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReg_assign" ):
                listener.exitReg_assign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReg_assign" ):
                return visitor.visitReg_assign(self)
            else:
                return visitor.visitChildren(self)


    class Special_assignContext(Expr_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.Expr_stmtContext
            super().__init__(parser)
            self.lhs = None # Testlist_star_exprContext
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,0)

        def annassign(self):
            return self.getTypedRuleContext(Python3Parser.AnnassignContext,0)

        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial_assign" ):
                listener.enterSpecial_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial_assign" ):
                listener.exitSpecial_assign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecial_assign" ):
                return visitor.visitSpecial_assign(self)
            else:
                return visitor.visitChildren(self)



    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.state = 478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                localctx = Python3Parser.Special_assignContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 458
                localctx.lhs = self.testlist_star_expr()
                self.state = 465
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54]:
                    self.state = 459
                    self.annassign()
                    pass
                elif token in [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94]:
                    self.state = 460
                    self.augassign()
                    self.state = 463
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [31]:
                        self.state = 461
                        self.yield_expr()
                        pass
                    elif token in [1, 2, 22, 25, 27, 28, 29, 37, 39, 46, 47, 49, 51, 58, 65, 66, 70, 71]:
                        self.state = 462
                        self.testlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = Python3Parser.Reg_assignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                localctx.lhs = self.testlist_star_expr()
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==57:
                    self.state = 468
                    self.match(Python3Parser.ASSIGN)
                    self.state = 471
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [31]:
                        self.state = 469
                        self.yield_expr()
                        pass
                    elif token in [1, 2, 22, 25, 27, 28, 29, 37, 39, 46, 47, 49, 50, 51, 58, 65, 66, 70, 71]:
                        self.state = 470
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_decl = None # TestContext
            self.value = None # TestContext

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = Python3Parser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(Python3Parser.COLON)
            self.state = 481
            localctx.type_decl = self.test()
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 482
                self.match(Python3Parser.ASSIGN)
                self.state = 483
                localctx.value = self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Test_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Test_star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.test_star_expr()
            self.state = 491
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487
                    self.match(Python3Parser.COMMA)
                    self.state = 488
                    self.test_star_expr() 
                self.state = 493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 494
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def star_expr(self):
            return self.getTypedRuleContext(Python3Parser.Star_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_star_expr" ):
                listener.enterTest_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_star_expr" ):
                listener.exitTest_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_star_expr" ):
                return visitor.visitTest_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def test_star_expr(self):

        localctx = Python3Parser.Test_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_test_star_expr)
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 22, 25, 27, 28, 29, 37, 39, 46, 47, 49, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.test()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            _la = self._input.LA(1)
            if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 8191) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(Python3Parser.DEL)
            self.state = 504
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flow_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_flow_stmt)
        try:
            self.state = 513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.break_stmt()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.continue_stmt()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 3)
                self.state = 510
                self.return_stmt()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 4)
                self.state = 511
                self.raise_stmt()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 5)
                self.state = 512
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(Python3Parser.RETURN)
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 291256920323391494) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                self.state = 520
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(Python3Parser.RAISE)
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 291256920323391494) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                self.state = 526
                self.test()
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 527
                    self.match(Python3Parser.FROM)
                    self.state = 528
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_import_stmt)
        try:
            self.state = 535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 533
                self.import_name()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 534
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(Python3Parser.IMPORT)
            self.state = 538
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s48 = None # Token
            self.relative = list() # of Tokens
            self.s49 = None # Token
            self._tset851 = None # Token
            self._tset866 = None # Token
            self.import_all = None # Token

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(Python3Parser.FROM)
            self.state = 553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==48 or _la==49:
                    self.state = 541
                    localctx._tset851 = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==48 or _la==49):
                        localctx._tset851 = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    localctx.relative.append(localctx._tset851)
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 547
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 549 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 548
                    localctx._tset866 = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==48 or _la==49):
                        localctx._tset866 = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    localctx.relative.append(localctx._tset866)
                    self.state = 551 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==48 or _la==49):
                        break

                pass


            self.state = 555
            self.match(Python3Parser.IMPORT)
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.state = 556
                localctx.import_all = self.match(Python3Parser.STAR)
                pass
            elif token in [51]:
                self.state = 557
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 558
                self.import_as_names()
                self.state = 559
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [39]:
                self.state = 561
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.new_name = None # Token

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(Python3Parser.NAME)
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 565
                self.match(Python3Parser.AS)
                self.state = 566
                localctx.new_name = self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.dotted_name()
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 570
                self.match(Python3Parser.AS)
                self.state = 571
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.import_as_name()
            self.state = 579
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 575
                    self.match(Python3Parser.COMMA)
                    self.state = 576
                    self.import_as_name() 
                self.state = 581
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 582
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.dotted_as_name()
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 586
                self.match(Python3Parser.COMMA)
                self.state = 587
                self.dotted_as_name()
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(Python3Parser.NAME)
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==48:
                self.state = 594
                self.match(Python3Parser.DOT)
                self.state = 595
                self.match(Python3Parser.NAME)
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(Python3Parser.GLOBAL)
            self.state = 602
            self.match(Python3Parser.NAME)
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 603
                self.match(Python3Parser.COMMA)
                self.state = 604
                self.match(Python3Parser.NAME)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.match(Python3Parser.NONLOCAL)
            self.state = 611
            self.match(Python3Parser.NAME)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 612
                self.match(Python3Parser.COMMA)
                self.state = 613
                self.match(Python3Parser.NAME)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(Python3Parser.ASSERT)
            self.state = 620
            self.test()
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 621
                self.match(Python3Parser.COMMA)
                self.state = 622
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Async_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_compound_stmt)
        try:
            self.state = 634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self.if_stmt()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.while_stmt()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self.for_stmt()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                self.try_stmt()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 5)
                self.state = 629
                self.with_stmt()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 6)
                self.state = 630
                self.funcdef()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 7)
                self.state = 631
                self.classdef()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 8)
                self.state = 632
                self.decorated()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 9)
                self.state = 633
                self.async_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = Python3Parser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(Python3Parser.ASYNC)
            self.state = 640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 637
                self.funcdef()
                pass
            elif token in [20]:
                self.state = 638
                self.with_stmt()
                pass
            elif token in [16]:
                self.state = 639
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._suite = None # SuiteContext
            self.blocks = list() # of SuiteContexts
            self.else_block = None # SuiteContext

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(Python3Parser.IF)
            self.state = 643
            self.test()
            self.state = 644
            self.match(Python3Parser.COLON)
            self.state = 645
            localctx._suite = self.suite()
            localctx.blocks.append(localctx._suite)
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 646
                self.match(Python3Parser.ELIF)
                self.state = 647
                self.test()
                self.state = 648
                self.match(Python3Parser.COLON)
                self.state = 649
                localctx._suite = self.suite()
                localctx.blocks.append(localctx._suite)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 656
                self.match(Python3Parser.ELSE)
                self.state = 657
                self.match(Python3Parser.COLON)
                self.state = 658
                localctx.else_block = self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(Python3Parser.WHILE)
            self.state = 662
            self.test()
            self.state = 663
            self.match(Python3Parser.COLON)
            self.state = 664
            self.suite()
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 665
                self.match(Python3Parser.ELSE)
                self.state = 666
                self.match(Python3Parser.COLON)
                self.state = 667
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(Python3Parser.FOR)
            self.state = 671
            self.exprlist()
            self.state = 672
            self.match(Python3Parser.IN)
            self.state = 673
            self.testlist()
            self.state = 674
            self.match(Python3Parser.COLON)
            self.state = 675
            self.suite()
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 676
                self.match(Python3Parser.ELSE)
                self.state = 677
                self.match(Python3Parser.COLON)
                self.state = 678
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(Python3Parser.TRY)
            self.state = 682
            self.match(Python3Parser.COLON)
            self.state = 683
            self.suite()
            self.state = 705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.state = 688 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 684
                    self.except_clause()
                    self.state = 685
                    self.match(Python3Parser.COLON)
                    self.state = 686
                    self.suite()
                    self.state = 690 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==21):
                        break

                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 692
                    self.match(Python3Parser.ELSE)
                    self.state = 693
                    self.match(Python3Parser.COLON)
                    self.state = 694
                    self.suite()


                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 697
                    self.match(Python3Parser.FINALLY)
                    self.state = 698
                    self.match(Python3Parser.COLON)
                    self.state = 699
                    self.suite()


                pass
            elif token in [19]:
                self.state = 702
                self.match(Python3Parser.FINALLY)
                self.state = 703
                self.match(Python3Parser.COLON)
                self.state = 704
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(Python3Parser.WITH)
            self.state = 708
            self.with_item()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 709
                self.match(Python3Parser.COMMA)
                self.state = 710
                self.with_item()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 716
            self.match(Python3Parser.COLON)
            self.state = 717
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.test()
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 720
                self.match(Python3Parser.AS)
                self.state = 721
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(Python3Parser.EXCEPT)
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 291256920323391494) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                self.state = 725
                self.test()
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 726
                    self.match(Python3Parser.AS)
                    self.state = 727
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 5, 6, 7, 9, 10, 11, 22, 25, 27, 28, 29, 31, 32, 33, 34, 35, 37, 39, 46, 47, 49, 50, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.simple_stmt()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.match(Python3Parser.NEWLINE)
                self.state = 734
                self.match(Python3Parser.INDENT)
                self.state = 736 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 735
                    self.stmt()
                    self.state = 738 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 292382956596862718) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 32867) != 0)):
                        break

                self.state = 740
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 25, 27, 28, 29, 37, 39, 46, 47, 49, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.or_test()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 745
                    self.match(Python3Parser.IF)
                    self.state = 746
                    self.or_test()
                    self.state = 747
                    self.match(Python3Parser.ELSE)
                    self.state = 748
                    self.test()


                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_test_nocond)
        try:
            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 25, 27, 28, 29, 37, 39, 46, 47, 49, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.or_test()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(Python3Parser.LAMBDA)
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 73184043700584448) != 0):
                self.state = 760
                self.varargslist()


            self.state = 763
            self.match(Python3Parser.COLON)
            self.state = 764
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambdef_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(Python3Parser.LAMBDA)
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 73184043700584448) != 0):
                self.state = 767
                self.varargslist()


            self.state = 770
            self.match(Python3Parser.COLON)
            self.state = 771
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.and_test()
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23:
                self.state = 774
                self.match(Python3Parser.OR)
                self.state = 775
                self.and_test()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.not_test()
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 782
                self.match(Python3Parser.AND)
                self.state = 783
                self.not_test()
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_not_test)
        try:
            self.state = 792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 789
                self.match(Python3Parser.NOT)
                self.state = 790
                self.not_test()
                pass
            elif token in [1, 2, 27, 28, 29, 37, 39, 46, 47, 49, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.expr()
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 9151314442816848641) != 0):
                self.state = 795
                self.comp_op()
                self.state = 796
                self.expr()
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_comp_op)
        try:
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 805
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 806
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 807
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 808
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 809
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 810
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 811
                self.match(Python3Parser.NOT)
                self.state = 812
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 813
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 814
                self.match(Python3Parser.IS)
                self.state = 815
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(Python3Parser.STAR)
            self.state = 819
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Xor_exprContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR_OP)
            else:
                return self.getToken(Python3Parser.OR_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.xor_expr()
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 822
                self.match(Python3Parser.OR_OP)
                self.state = 823
                self.xor_expr()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xor_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_exprContext,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.XOR)
            else:
                return self.getToken(Python3Parser.XOR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXor_expr" ):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)




    def xor_expr(self):

        localctx = Python3Parser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.and_expr()
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 830
                self.match(Python3Parser.XOR)
                self.state = 831
                self.and_expr()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Shift_exprContext,i)


        def AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND_OP)
            else:
                return self.getToken(Python3Parser.AND_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)




    def and_expr(self):

        localctx = Python3Parser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.shift_expr()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==62:
                self.state = 838
                self.match(Python3Parser.AND_OP)
                self.state = 839
                self.shift_expr()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s63 = None # Token
            self.op = list() # of Tokens
            self.s64 = None # Token
            self._tset1474 = None # Token

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Arith_exprContext,i)


        def LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.LEFT_SHIFT)
            else:
                return self.getToken(Python3Parser.LEFT_SHIFT, i)

        def RIGHT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.RIGHT_SHIFT)
            else:
                return self.getToken(Python3Parser.RIGHT_SHIFT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)




    def shift_expr(self):

        localctx = Python3Parser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.arith_expr()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==63 or _la==64:
                self.state = 846
                localctx._tset1474 = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==63 or _la==64):
                    localctx._tset1474 = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.op.append(localctx._tset1474)
                self.state = 847
                self.arith_expr()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s65 = None # Token
            self.op = list() # of Tokens
            self.s66 = None # Token
            self._tset1493 = None # Token

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TermContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TermContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ADD)
            else:
                return self.getToken(Python3Parser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MINUS)
            else:
                return self.getToken(Python3Parser.MINUS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)




    def arith_expr(self):

        localctx = Python3Parser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.term()
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==65 or _la==66:
                self.state = 854
                localctx._tset1493 = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==65 or _la==66):
                    localctx._tset1493 = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.op.append(localctx._tset1493)
                self.state = 855
                self.term()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s50 = None # Token
            self.op = list() # of Tokens
            self.s80 = None # Token
            self.s67 = None # Token
            self.s68 = None # Token
            self.s69 = None # Token
            self._tset1512 = None # Token

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STAR)
            else:
                return self.getToken(Python3Parser.STAR, i)

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AT)
            else:
                return self.getToken(Python3Parser.AT, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DIV)
            else:
                return self.getToken(Python3Parser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MOD)
            else:
                return self.getToken(Python3Parser.MOD, i)

        def IDIV(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.IDIV)
            else:
                return self.getToken(Python3Parser.IDIV, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = Python3Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.factor()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & 1074659329) != 0):
                self.state = 862
                localctx._tset1512 = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & 1074659329) != 0)):
                    localctx._tset1512 = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.op.append(localctx._tset1512)
                self.state = 863
                self.factor()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(Python3Parser.NOT_OP, 0)

        def power(self):
            return self.getTypedRuleContext(Python3Parser.PowerContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 35) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 870
                self.factor()
                pass
            elif token in [1, 2, 27, 28, 29, 37, 39, 46, 47, 49, 51, 58, 71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(Python3Parser.Atom_exprContext,0)


        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = Python3Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.atom_expr()
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 875
                self.match(Python3Parser.POWER)
                self.state = 876
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = Python3Parser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 879
                self.match(Python3Parser.AWAIT)


            self.state = 882
            self.atom()
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 290763650942107648) != 0):
                self.state = 883
                self.trailer()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Atom_nameContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_name" ):
                listener.enterAtom_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_name" ):
                listener.exitAtom_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_name" ):
                return visitor.visitAtom_name(self)
            else:
                return visitor.visitChildren(self)


    class Atom_dict_or_setContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)
        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)
        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_dict_or_set" ):
                listener.enterAtom_dict_or_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_dict_or_set" ):
                listener.exitAtom_dict_or_set(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_dict_or_set" ):
                return visitor.visitAtom_dict_or_set(self)
            else:
                return visitor.visitChildren(self)


    class Atom_falseContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_false" ):
                listener.enterAtom_false(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_false" ):
                listener.exitAtom_false(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_false" ):
                return visitor.visitAtom_false(self)
            else:
                return visitor.visitChildren(self)


    class Atom_numberContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(Python3Parser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_number" ):
                listener.enterAtom_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_number" ):
                listener.exitAtom_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_number" ):
                return visitor.visitAtom_number(self)
            else:
                return visitor.visitChildren(self)


    class Atom_stringsContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_strings" ):
                listener.enterAtom_strings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_strings" ):
                listener.exitAtom_strings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_strings" ):
                return visitor.visitAtom_strings(self)
            else:
                return visitor.visitChildren(self)


    class Atom_trueContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_true" ):
                listener.enterAtom_true(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_true" ):
                listener.exitAtom_true(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_true" ):
                return visitor.visitAtom_true(self)
            else:
                return visitor.visitChildren(self)


    class Atom_ellipsisContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_ellipsis" ):
                listener.enterAtom_ellipsis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_ellipsis" ):
                listener.exitAtom_ellipsis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_ellipsis" ):
                return visitor.visitAtom_ellipsis(self)
            else:
                return visitor.visitChildren(self)


    class Atom_listContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)
        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)
        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_list" ):
                listener.enterAtom_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_list" ):
                listener.exitAtom_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_list" ):
                return visitor.visitAtom_list(self)
            else:
                return visitor.visitChildren(self)


    class Atom_noneContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_none" ):
                listener.enterAtom_none(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_none" ):
                listener.exitAtom_none(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_none" ):
                return visitor.visitAtom_none(self)
            else:
                return visitor.visitChildren(self)


    class Atom_tupleContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)
        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)

        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_tuple" ):
                listener.enterAtom_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_tuple" ):
                listener.exitAtom_tuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_tuple" ):
                return visitor.visitAtom_tuple(self)
            else:
                return visitor.visitChildren(self)



    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                localctx = Python3Parser.Atom_tupleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 892
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [31]:
                    self.state = 890
                    self.yield_expr()
                    pass
                elif token in [1, 2, 22, 25, 27, 28, 29, 37, 39, 46, 47, 49, 50, 51, 58, 65, 66, 70, 71]:
                    self.state = 891
                    self.testlist_comp()
                    pass
                elif token in [52]:
                    pass
                else:
                    pass
                self.state = 894
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [58]:
                localctx = Python3Parser.Atom_listContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 292382820230234118) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                    self.state = 896
                    self.testlist_comp()


                self.state = 899
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [71]:
                localctx = Python3Parser.Atom_dict_or_setContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 364440414268162054) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                    self.state = 901
                    self.dictorsetmaker()


                self.state = 904
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [39]:
                localctx = Python3Parser.Atom_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 905
                self.match(Python3Parser.NAME)
                pass
            elif token in [2, 46, 47]:
                localctx = Python3Parser.Atom_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 906
                self.number()
                pass
            elif token in [1]:
                localctx = Python3Parser.Atom_stringsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 908 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 907
                    self.match(Python3Parser.STRING)
                    self.state = 910 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1):
                        break

                pass
            elif token in [49]:
                localctx = Python3Parser.Atom_ellipsisContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 912
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [27]:
                localctx = Python3Parser.Atom_noneContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 913
                self.match(Python3Parser.NONE)
                pass
            elif token in [28]:
                localctx = Python3Parser.Atom_trueContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 914
                self.match(Python3Parser.TRUE)
                pass
            elif token in [29]:
                localctx = Python3Parser.Atom_falseContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 915
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_comp1(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_comp1Context,0)


        def testlist_comp2(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_comp2Context,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_testlist_comp)
        try:
            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 918
                self.testlist_comp1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 919
                self.testlist_comp2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_comp1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test_star_expr(self):
            return self.getTypedRuleContext(Python3Parser.Test_star_exprContext,0)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp1" ):
                listener.enterTestlist_comp1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp1" ):
                listener.exitTestlist_comp1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp1" ):
                return visitor.visitTestlist_comp1(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp1(self):

        localctx = Python3Parser.Testlist_comp1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_testlist_comp1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.test_star_expr()
            self.state = 923
            self.comp_for()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_comp2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.extra_comma = None # Token

        def test_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Test_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Test_star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp2" ):
                listener.enterTestlist_comp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp2" ):
                listener.exitTestlist_comp2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp2" ):
                return visitor.visitTestlist_comp2(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp2(self):

        localctx = Python3Parser.Testlist_comp2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_testlist_comp2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.test_star_expr()
            self.state = 930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 926
                    self.match(Python3Parser.COMMA)
                    self.state = 927
                    self.test_star_expr() 
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 933
                localctx.extra_comma = self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trailer_attributeContext(TrailerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.TrailerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)
        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer_attribute" ):
                listener.enterTrailer_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer_attribute" ):
                listener.exitTrailer_attribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer_attribute" ):
                return visitor.visitTrailer_attribute(self)
            else:
                return visitor.visitChildren(self)


    class Trailer_argsContext(TrailerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.TrailerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)
        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer_args" ):
                listener.enterTrailer_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer_args" ):
                listener.exitTrailer_args(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer_args" ):
                return visitor.visitTrailer_args(self)
            else:
                return visitor.visitChildren(self)


    class Trailer_subscriptsContext(TrailerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.TrailerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)
        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer_subscripts" ):
                listener.enterTrailer_subscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer_subscripts" ):
                listener.exitTrailer_subscripts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer_subscripts" ):
                return visitor.visitTrailer_subscripts(self)
            else:
                return visitor.visitChildren(self)



    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                localctx = Python3Parser.Trailer_argsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 364440414268162054) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                    self.state = 937
                    self.arglist()


                self.state = 940
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [58]:
                localctx = Python3Parser.Trailer_subscriptsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 942
                self.subscriptlist()
                self.state = 943
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [48]:
                localctx = Python3Parser.Trailer_attributeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 945
                self.match(Python3Parser.DOT)
                self.state = 946
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.subscript()
            self.state = 954
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 950
                    self.match(Python3Parser.COMMA)
                    self.state = 951
                    self.subscript() 
                self.state = 956
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 957
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sub_expr = None # TestContext
            self.from_expr = None # TestContext
            self.to_expr = None # TestContext
            self.step_expr = None # TestContext

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                localctx.sub_expr = self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 291256920323391494) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                    self.state = 961
                    localctx.from_expr = self.test()


                self.state = 964
                self.match(Python3Parser.COLON)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 291256920323391494) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                    self.state = 965
                    localctx.to_expr = self.test()


                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 968
                    self.match(Python3Parser.COLON)
                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 291256920323391494) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                        self.state = 969
                        localctx.step_expr = self.test()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_or_star(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Expr_or_starContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Expr_or_starContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.expr_or_star()
            self.state = 981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 977
                    self.match(Python3Parser.COMMA)
                    self.state = 978
                    self.expr_or_star() 
                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 984
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_or_starContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def star_expr(self):
            return self.getTypedRuleContext(Python3Parser.Star_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr_or_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_or_star" ):
                listener.enterExpr_or_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_or_star" ):
                listener.exitExpr_or_star(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_or_star" ):
                return visitor.visitExpr_or_star(self)
            else:
                return visitor.visitChildren(self)




    def expr_or_star(self):

        localctx = Python3Parser.Expr_or_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expr_or_star)
        try:
            self.state = 989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 27, 28, 29, 37, 39, 46, 47, 49, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 987
                self.expr()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 988
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.test()
            self.state = 996
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 992
                    self.match(Python3Parser.COMMA)
                    self.state = 993
                    self.test() 
                self.state = 998
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 999
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Dict_comprContext(DictorsetmakerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.DictorsetmakerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dict_compr_component(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dict_compr_componentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dict_compr_componentContext,i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_compr" ):
                listener.enterDict_compr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_compr" ):
                listener.exitDict_compr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict_compr" ):
                return visitor.visitDict_compr(self)
            else:
                return visitor.visitChildren(self)


    class Set_comprContext(DictorsetmakerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.DictorsetmakerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def test_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Test_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Test_star_exprContext,i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_compr" ):
                listener.enterSet_compr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_compr" ):
                listener.exitSet_compr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_compr" ):
                return visitor.visitSet_compr(self)
            else:
                return visitor.visitChildren(self)



    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 1030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                localctx = Python3Parser.Dict_comprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1002
                self.dict_compr_component()
                self.state = 1014
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [16, 36]:
                    self.state = 1003
                    self.comp_for()
                    pass
                elif token in [53, 72]:
                    self.state = 1008
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1004
                            self.match(Python3Parser.COMMA)
                            self.state = 1005
                            self.dict_compr_component() 
                        self.state = 1010
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==53:
                        self.state = 1011
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = Python3Parser.Set_comprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.test_star_expr()
                self.state = 1028
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [16, 36]:
                    self.state = 1017
                    self.comp_for()
                    pass
                elif token in [53, 72]:
                    self.state = 1022
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1018
                            self.match(Python3Parser.COMMA)
                            self.state = 1019
                            self.test_star_expr() 
                        self.state = 1024
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==53:
                        self.state = 1025
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dict_compr_componentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_dict_compr_component

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_compr_component" ):
                listener.enterDict_compr_component(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_compr_component" ):
                listener.exitDict_compr_component(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict_compr_component" ):
                return visitor.visitDict_compr_component(self)
            else:
                return visitor.visitChildren(self)




    def dict_compr_component(self):

        localctx = Python3Parser.Dict_compr_componentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_dict_compr_component)
        try:
            self.state = 1038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 22, 25, 27, 28, 29, 37, 39, 46, 47, 49, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.test()
                self.state = 1033
                self.match(Python3Parser.COLON)
                self.state = 1034
                self.test()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.match(Python3Parser.POWER)
                self.state = 1037
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(Python3Parser.CLASS)
            self.state = 1041
            self.match(Python3Parser.NAME)
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1042
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 364440414268162054) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                    self.state = 1043
                    self.arglist()


                self.state = 1046
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 1049
            self.match(Python3Parser.COLON)
            self.state = 1050
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.argument()
            self.state = 1057
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1053
                    self.match(Python3Parser.COMMA)
                    self.state = 1054
                    self.argument() 
                self.state = 1059
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1060
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Arg_restContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)
        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_rest" ):
                listener.enterArg_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_rest" ):
                listener.exitArg_rest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_rest" ):
                return visitor.visitArg_rest(self)
            else:
                return visitor.visitChildren(self)


    class Arg_kwContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)
        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_kw" ):
                listener.enterArg_kw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_kw" ):
                listener.exitArg_kw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_kw" ):
                return visitor.visitArg_kw(self)
            else:
                return visitor.visitChildren(self)


    class Arg_or_genContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_or_gen" ):
                listener.enterArg_or_gen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_or_gen" ):
                listener.exitArg_or_gen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_or_gen" ):
                return visitor.visitArg_or_gen(self)
            else:
                return visitor.visitChildren(self)


    class Arg_assignContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)

        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_assign" ):
                listener.enterArg_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_assign" ):
                listener.exitArg_assign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_assign" ):
                return visitor.visitArg_assign(self)
            else:
                return visitor.visitChildren(self)



    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                localctx = Python3Parser.Arg_or_genContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.test()
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16 or _la==36:
                    self.state = 1064
                    self.comp_for()


                pass

            elif la_ == 2:
                localctx = Python3Parser.Arg_assignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.test()
                self.state = 1068
                self.match(Python3Parser.ASSIGN)
                self.state = 1069
                self.test()
                pass

            elif la_ == 3:
                localctx = Python3Parser.Arg_kwContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.match(Python3Parser.POWER)
                self.state = 1072
                self.test()
                pass

            elif la_ == 4:
                localctx = Python3Parser.Arg_restContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1073
                self.match(Python3Parser.STAR)
                self.state = 1074
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_comp_iter)
        try:
            self.state = 1079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.comp_for()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1081
                self.match(Python3Parser.ASYNC)


            self.state = 1084
            self.match(Python3Parser.FOR)
            self.state = 1085
            self.exprlist()
            self.state = 1086
            self.match(Python3Parser.IN)
            self.state = 1087
            self.or_test()
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 68719546368) != 0):
                self.state = 1088
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(Python3Parser.IF)
            self.state = 1092
            self.test_nocond()
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 68719546368) != 0):
                self.state = 1093
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncoding_decl" ):
                return visitor.visitEncoding_decl(self)
            else:
                return visitor.visitChildren(self)




    def encoding_decl(self):

        localctx = Python3Parser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(Python3Parser.YIELD)
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 291256920323391558) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 99) != 0):
                self.state = 1099
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_yield_arg)
        try:
            self.state = 1105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.match(Python3Parser.FROM)
                self.state = 1103
                self.test()
                pass
            elif token in [1, 2, 22, 25, 27, 28, 29, 37, 39, 46, 47, 49, 51, 58, 65, 66, 70, 71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(Python3Parser.INTEGER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(Python3Parser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(Python3Parser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = Python3Parser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 211106232532996) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





